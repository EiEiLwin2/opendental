using System;
using System.Data;
using System.IO;
using System.Text;
using System.Xml;

namespace OpenDentalWebService {
	///<summary>This file is NOT generated automatically by the crud, you must manually make changes to this file.  However, the methods in this class will most likely get called from classes generated by the crud.  Make sure the necessary changes to the crud have been made.  The "Primitive and General Types" region of Remoting.DtoMethods.CallClassDeserializer() is an example where a crud enhancement would need to take place if adding a type to this file.</summary>
	public static class aaGeneralTypes {

		///<summary>Goes through all the possible types of objects and returns the object serialized for Java.  Returns an empty node if the object is null.  Throws exceptions.</summary>
		public static string Serialize(string typeName,Object obj) {
			if(obj==null) {
				return "<"+typeName+"/>";//Return an empty node?
			}
			//Primitives--------------------------------------------------------------------
			if(typeName=="int") {
				return "<int>"+OpenDentBusiness.POut.Int((int)obj)+"</int>";
			}
			if(typeName=="long") {//Web app does not use longs.
				//The largest possible value of an Int32 is 2,147,483,647.  An OverflowException will occur if the long is too big for the web version.
				return "<int>"+Convert.ToInt32(((long)obj)).ToString()+"</int>";
			}
			if(typeName=="bool") {
				return "<boolean>"+OpenDentBusiness.POut.Bool((bool)obj)+"</boolean>";
			}
			if(typeName=="string") {
				return "<String>"+OpenDentBusiness.POut.String((string)obj)+"</String>";
			}
			if(typeName=="char") {
				return "<char>"+Convert.ToChar((char)obj).ToString()+"</char>";
			}
			if(typeName=="float") {
				return "<float>"+OpenDentBusiness.POut.Float((float)obj)+"</float>";
			}
			if(typeName=="byte") {
				return "<byte>"+OpenDentBusiness.POut.Byte((byte)obj)+"</byte>";
			}
			if(typeName=="double") {
				return "<double>"+OpenDentBusiness.POut.Double((double)obj)+"</double>";
			}
			//DataTable---------------------------------------------------------------------
			if(typeName=="DataTable") {
				return SerializeDataTable((DataTable)obj);
			}
			//List<?>-----------------------------------------------------------------------
			if(typeName.StartsWith("List<")) {
				return"";//Not sure how to handle lists of objects without reflection just yet...
			}
			//Arrays------------------------------------------------------------------------
			if(typeName.Contains("[")){
				return "";//TODO: This will need to be enhanced to handle simple and possibly multidimensional arrays.
			}
			throw new NotSupportedException("Serialize, unsupported primitive or general type: "+typeName);
		}

		///<summary>Returns the primitive or general object deserialized.  Throws exception.</summary>
		public static object Deserialize(string typeName,string xml) {
			try {
				using(XmlReader reader=XmlReader.Create(new StringReader(xml))) {
					while(reader.Read()) {//In a loop just in case there is whitespace and it needs to read more than once.  Shouldn't need to loop more than once.
						//Primitives--------------------------------------------------------------------
						switch(reader.Name) {
							case "int":
								return OpenDentBusiness.PIn.Int(reader.ReadString());
							case "long":
								return OpenDentBusiness.PIn.Long(reader.ReadString());
							case "bool":
								return OpenDentBusiness.PIn.Bool(reader.ReadString());
							case "string":
								return OpenDentBusiness.PIn.String(reader.ReadString());
							case "char":
								return Convert.ToChar(reader.ReadString());
							case "float":
								return OpenDentBusiness.PIn.Float(reader.ReadString());
							case "byte":
								return OpenDentBusiness.PIn.Byte(reader.ReadString());
							case "double":
								return OpenDentBusiness.PIn.Double(reader.ReadString());
						}
						//List<?>-----------------------------------------------------------------------
						if(typeName.StartsWith("List&lt;")) {
							return "";//Not sure how to handle lists of objects without reflection just yet...
						}
						//Arrays------------------------------------------------------------------------
						if(typeName.Contains("[")) {
							return "";//TODO: This will need to be enhanced to handle simple and possibly multidimensional arrays.
						}
					}
				}
			}
			catch {
				throw new NotSupportedException("Deserialize, error deserializing primitive or general type: "+typeName);
			}
			//Type must not be supported yet.
			throw new NotSupportedException("Deserialize, unsupported primitive or general type: "+typeName);
		}

		///<summary>Helper function that will serialize a data table by looping through the rows and columns.</summary>
		private static string SerializeDataTable(DataTable table) {
			StringBuilder result=new StringBuilder();
			result.Append("<DataT>");
			//Table name.
			result.Append("<Name>").Append(table.TableName).Append("</Name>");
			//Column names.
			result.Append("<Cols>");
			for(int i=0;i<table.Columns.Count;i++) {
				result.Append("<Col>").Append(table.Columns[i].ColumnName).Append("</Col>");
			}
			result.Append("</Cols>");
			//Set each cell by looping through each column row by row.
			result.Append("<Cells>");
			for(int i=0;i<table.Rows.Count;i++) {//Row loop.
				result.Append("<y>");
				for(int j=0;j<table.Columns.Count;j++) {//Column loop.
					string content=table.Rows[i][j].ToString();
					if(content.Trim()=="") {//Test if the element will be empty, this will save space on big DataTables.
 						result.Append("<x/>");
					}
					else {
						result.Append("<x>").Append(SerializeStringEscapes.EscapeForXml(table.Rows[i][j].ToString())).Append("</x>");
					}
				}
				result.Append("</y>");
			}
			result.Append("</Cells>");
			result.Append("</DataT>");
			return result.ToString();
		}



	}
}