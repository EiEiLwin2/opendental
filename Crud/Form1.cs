using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Windows.Forms;
using OpenDentBusiness;

namespace Crud {
	public partial class Form1:Form {
		private string crudDir;
		private const string rn="\r\n";
		private const string t="\t";
		private const string t2="\t\t";
		private const string t3="\t\t\t";
		private const string t4="\t\t\t\t";

		public Form1() {
			InitializeComponent();
		}

		private void Form1_Load(object sender,EventArgs e) {
			crudDir=@"..\..\..\OpenDentBusiness\Crud";
			if(!Directory.Exists(crudDir)) {
				MessageBox.Show(crudDir+" is an invalid path.");
				Application.Exit();
			}
		}

		private void butRun_Click(object sender,EventArgs e) {
			string[] files=Directory.GetFiles(crudDir);
			for(int i=0;i<files.Length;i++) {
				if(checkOne.Checked && Path.GetFileNameWithoutExtension(files[i])!="Account") {
					continue;
				}
				File.Delete(files[i]);
			}
			Type typeTableBase=typeof(TableBase);
			Assembly assembly=Assembly.GetAssembly(typeTableBase);
			StringBuilder strb;
			foreach(Type typeClass in assembly.GetTypes()){
				if(typeClass.BaseType!=typeTableBase) {
					continue;
				}
				if(checkOne.Checked && typeClass.Name!="Account") {
					continue;
				}
				string className=typeClass.Name+"Crud";
				strb=new StringBuilder();
				WriteAll(strb,className,typeClass);
				//Create,Read,Update,Delete
				/*WriteSelect(strb,className,type);
				WriteInsert(strb,className,type);
				WriteUpdate(strb,className,type);
				WriteDelete(strb,className,type);
				WriteFooter(strb,className,type);*/
				File.WriteAllText(Path.Combine(crudDir,className+".cs"),strb.ToString());
			}
			MessageBox.Show("Done");
			Application.Exit();
		}

		private void butClear_Click(object sender,EventArgs e) {
			string[] files=Directory.GetFiles(crudDir);
			for(int i=0;i<files.Length;i++) {
				File.WriteAllText(files[i],"");
			}
			MessageBox.Show("Done");
			Application.Exit();
		}

		///<summary>Example of className is 'AccountCrud'.</summary>
		private void WriteAll(StringBuilder strb,string className,Type typeClass) {
			FieldInfo[] fields=typeClass.GetFields();//We can't assume they are in the correct order.
			FieldInfo priKey=CrudGenHelper.GetPriKey(fields,typeClass.Name);
			strb.Append("//This file is automatically generated, most recently on "+DateTime.Now.ToString()+rn
				+"//Do not attempt to make changes to this file because the changes will be erased and overwritten."+rn
				+@"using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class "+className+" {");
			//SelectOne------------------------------------------------------------------------------------------
			strb.Append(rn+t2+"///<summary>Gets one "+typeClass.Name+" object from the database using the primary key.</summary>");
			strb.Append(rn+t2+"internal static "+typeClass.Name+" SelectOne(long "+priKey.Name+"){");
			strb.Append(rn+t3+"return null;");
			strb.Append(rn+t2+"}");
			//SelectOne(string command)--------------------------------------------------------------------------
			strb.Append(rn+rn+t2+"///<summary>Gets one "+typeClass.Name+" object from the database using a query.</summary>");
			strb.Append(rn+t2+"internal static "+typeClass.Name+" SelectOne(string command){");
			strb.Append(rn+t3+@"if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException(""Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n""+command);
			}");
			strb.Append(rn+t3+"return null;");
			strb.Append(rn+t2+"}");
			//SelectMany-----------------------------------------------------------------------------------------
			strb.Append(rn+rn+t2+"///<summary>Gets one "+typeClass.Name+" object from the database using a query.</summary>");
			strb.Append(rn+t2+"internal static List<"+typeClass.Name+"> SelectMany(string command){");
			strb.Append(rn+t3+@"if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException(""Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n""+command);
			}");
			strb.Append(rn+t3+"return null;");
			strb.Append(rn+t2+"}");
			//TableToList----------------------------------------------------------------------------------------
			strb.Append(rn+rn+t2+"///<summary>Converts a DataTable to a list of objects.</summary>");
			strb.Append(rn+t2+"internal static List<"+typeClass.Name+"> TableToList(DataTable table){");
			strb.Append(rn+t3+"List<"+typeClass.Name+"> retVal=new List<"+typeClass.Name+">();");
			strb.Append(rn+t3+typeClass.Name+" obj;");
			strb.Append(rn+t3+"for(int i=0;i<table.Rows.Count;i++) {");
			strb.Append(rn+t4+"obj=new "+typeClass.Name+"();");
			//get the longest fieldname for alignment purposes
			int longestField=0;
			for(int f=0;f<fields.Length;f++){
				if(fields[f].Name.Length>longestField){
					longestField=fields[f].Name.Length;
				}
			}
			for(int f=0;f<fields.Length;f++){
				//note.  These are not guaranteed to be in any particular order.
				strb.Append(rn+t4+"obj."+fields[f].Name.PadRight(longestField,' ')+"= ");
				if(fields[f].FieldType.IsEnum) {
					strb.Append("("+fields[f].FieldType.Name+")PIn.Long(");
				}
				else switch(fields[f].FieldType.Name){
					default:
						throw new ApplicationException("Type not yet supported: "+fields[f].FieldType.Name);
					case "Boolean":
						strb.Append("PIn.Bool  (");
						break;
					case "Color":
						strb.Append("Color.FromArgb(PIn.Int(");
						break;
					case "DateTime"://Need to handle DateT fields here better.
						strb.Append("PIn.Date  (");
						break;
					case "Int64":
						strb.Append("PIn.Long  (");
						break;
					case "String":
						strb.Append("PIn.String(");
						break;
				}
				strb.Append("table.Rows[i][\""+fields[f].Name+"\"].ToString())");
				if(fields[f].FieldType.Name=="Color") {
					strb.Append(")");
				}
				strb.Append(";");
			}
			strb.Append(rn+t4+"retVal.Add(obj);");
			strb.Append(rn+t3+"}");
			strb.Append(rn+t3+"return retVal;");
			strb.Append(rn+t2+"}");
			//Insert---------------------------------------------------------------------------------------------
			strb.Append(rn+rn+t2+"///<summary>Inserts one "+typeClass.Name+" into the database.  Returns the new priKey.</summary>");
			strb.Append(rn+t2+"internal static long Insert("+typeClass.Name+" obj){");
			strb.Append(rn+t3+"return 0;");
			strb.Append(rn+t2+"}");
			//Update---------------------------------------------------------------------------------------------
			strb.Append(rn+rn+t2+"///<summary>Updates one "+typeClass.Name+" in the database.</summary>");
			strb.Append(rn+t2+"internal static void Update("+typeClass.Name+" obj){");
			strb.Append(rn);
			strb.Append(rn+t2+"}");
			//Delete---------------------------------------------------------------------------------------------
			strb.Append(rn+rn+t2+"///<summary>Deletes one "+typeClass.Name+" from the database.  We might decide to not allow this for some tables.</summary>");
			strb.Append(rn+t2+"internal static void Delete(long "+priKey.Name+"){");
			strb.Append(rn);
			strb.Append(rn+t2+"}");
			//Footer
			strb.Append(@"
	}
}");
		}


	}
}
