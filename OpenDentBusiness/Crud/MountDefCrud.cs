//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class MountDefCrud {
		///<summary>Gets one MountDef object from the database using the primary key.  Returns null if not found.</summary>
		internal static MountDef SelectOne(long mountDefNum){
			string command="SELECT * FROM mountdef "
				+"WHERE MountDefNum = "+POut.Long(mountDefNum);
			List<MountDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one MountDef object from the database using a query.</summary>
		internal static MountDef SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<MountDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one MountDef object from the database using a query.</summary>
		internal static List<MountDef> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<MountDef> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<MountDef> TableToList(DataTable table){
			List<MountDef> retVal=new List<MountDef>();
			MountDef obj;
			for(int i=0;i<table.Rows.Count;i++) {
				obj=new MountDef();
				obj.MountDefNum = PIn.Long  (table.Rows[i]["MountDefNum"].ToString());
				obj.Description = PIn.String(table.Rows[i]["Description"].ToString());
				obj.ItemOrder   = PIn.Int   (table.Rows[i]["ItemOrder"].ToString());
				obj.IsRadiograph= PIn.Bool  (table.Rows[i]["IsRadiograph"].ToString());
				obj.Width       = PIn.Int   (table.Rows[i]["Width"].ToString());
				obj.Height      = PIn.Int   (table.Rows[i]["Height"].ToString());
				retVal.Add(obj);
			}
			return retVal;
		}

		///<summary>Inserts one MountDef into the database.  Returns the new priKey.</summary>
		internal static long Insert(MountDef obj){
			if(PrefC.RandomKeys) {
				obj.MountDefNum=ReplicationServers.GetKey("mountdef","MountDefNum");
			}
			string command="INSERT INTO mountdef (";
			if(PrefC.RandomKeys) {
				command+="MountDefNum,";
			}
			command+="Description,ItemOrder,IsRadiograph,Width,Height) VALUES(";
			if(PrefC.RandomKeys) {
				command+=POut.Long(obj.MountDefNum)+",";
			}
			command+=
				 "'"+POut.String(obj.Description)+"',"
				+    POut.Int   (obj.ItemOrder)+","
				+    POut.Bool  (obj.IsRadiograph)+","
				+    POut.Int   (obj.Width)+","
				+    POut.Int   (obj.Height)+")";
			if(PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				obj.MountDefNum=Db.NonQ(command,true);
			}
			return obj.MountDefNum;
		}

		///<summary>Updates one MountDef in the database.</summary>
		internal static void Update(MountDef obj){
			string command="UPDATE mountdef SET "
				+"Description = '"+POut.String(obj.Description)+"', "
				+"ItemOrder   =  "+POut.Int   (obj.ItemOrder)+", "
				+"IsRadiograph=  "+POut.Bool  (obj.IsRadiograph)+", "
				+"Width       =  "+POut.Int   (obj.Width)+", "
				+"Height      =  "+POut.Int   (obj.Height)+" "
				+"WHERE MountDefNum = "+POut.Long(obj.MountDefNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one MountDef from the database.</summary>
		internal static void Delete(long mountDefNum){
			string command="DELETE FROM mountdef "
				+"WHERE MountDefNum = "+POut.Long(mountDefNum);
			Db.NonQ(command);
		}
	}
}