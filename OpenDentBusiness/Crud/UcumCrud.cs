//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class UcumCrud {
		///<summary>Gets one UCUM object from the database using the primary key.  Returns null if not found.</summary>
		public static Ucum SelectOne(long uCUMNum){
			string command="SELECT * FROM ucum "
				+"WHERE UCUMNum = "+POut.Long(uCUMNum);
			List<Ucum> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one UCUM object from the database using a query.</summary>
		public static Ucum SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Ucum> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of UCUM objects from the database using a query.</summary>
		public static List<Ucum> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Ucum> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<Ucum> TableToList(DataTable table){
			List<Ucum> retVal=new List<Ucum>();
			Ucum uCUM;
			for(int i=0;i<table.Rows.Count;i++) {
				uCUM=new Ucum();
				uCUM.UcumNum    = PIn.Long  (table.Rows[i]["UCUMNum"].ToString());
				uCUM.UcumCode   = PIn.String(table.Rows[i]["UCUMCode"].ToString());
				uCUM.Description= PIn.String(table.Rows[i]["Description"].ToString());
				uCUM.IsInUse    = PIn.Bool  (table.Rows[i]["IsInUse"].ToString());
				retVal.Add(uCUM);
			}
			return retVal;
		}

		///<summary>Inserts one UCUM into the database.  Returns the new priKey.</summary>
		public static long Insert(Ucum uCUM){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				uCUM.UcumNum=DbHelper.GetNextOracleKey("ucum","UCUMNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(uCUM,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							uCUM.UcumNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(uCUM,false);
			}
		}

		///<summary>Inserts one UCUM into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(Ucum uCUM,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				uCUM.UcumNum=ReplicationServers.GetKey("ucum","UCUMNum");
			}
			string command="INSERT INTO ucum (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="UCUMNum,";
			}
			command+="UCUMCode,Description,IsInUse) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(uCUM.UcumNum)+",";
			}
			command+=
				 "'"+POut.String(uCUM.UcumCode)+"',"
				+"'"+POut.String(uCUM.Description)+"',"
				+    POut.Bool  (uCUM.IsInUse)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				uCUM.UcumNum=Db.NonQ(command,true);
			}
			return uCUM.UcumNum;
		}

		///<summary>Updates one UCUM in the database.</summary>
		public static void Update(Ucum uCUM){
			string command="UPDATE ucum SET "
				+"UCUMCode   = '"+POut.String(uCUM.UcumCode)+"', "
				+"Description= '"+POut.String(uCUM.Description)+"', "
				+"IsInUse    =  "+POut.Bool  (uCUM.IsInUse)+" "
				+"WHERE UCUMNum = "+POut.Long(uCUM.UcumNum);
			Db.NonQ(command);
		}

		///<summary>Updates one UCUM in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		public static void Update(Ucum uCUM,Ucum oldUCUM){
			string command="";
			if(uCUM.UcumCode != oldUCUM.UcumCode) {
				if(command!=""){ command+=",";}
				command+="UCUMCode = '"+POut.String(uCUM.UcumCode)+"'";
			}
			if(uCUM.Description != oldUCUM.Description) {
				if(command!=""){ command+=",";}
				command+="Description = '"+POut.String(uCUM.Description)+"'";
			}
			if(uCUM.IsInUse != oldUCUM.IsInUse) {
				if(command!=""){ command+=",";}
				command+="IsInUse = "+POut.Bool(uCUM.IsInUse)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE ucum SET "+command
				+" WHERE UCUMNum = "+POut.Long(uCUM.UcumNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one UCUM from the database.</summary>
		public static void Delete(long uCUMNum){
			string command="DELETE FROM ucum "
				+"WHERE UCUMNum = "+POut.Long(uCUMNum);
			Db.NonQ(command);
		}

	}
}