//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class DependantRelatCrud {
		///<summary>Gets one DependantRelat object from the database using the primary key.  Returns null if not found.</summary>
		internal static DependantRelat SelectOne(long dependantRelatNum){
			string command="SELECT * FROM dependantrelat "
				+"WHERE DependantRelatNum = "+POut.Long(dependantRelatNum);
			List<DependantRelat> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one DependantRelat object from the database using a query.</summary>
		internal static DependantRelat SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<DependantRelat> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of DependantRelat objects from the database using a query.</summary>
		internal static List<DependantRelat> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<DependantRelat> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<DependantRelat> TableToList(DataTable table){
			List<DependantRelat> retVal=new List<DependantRelat>();
			DependantRelat dependantRelat;
			for(int i=0;i<table.Rows.Count;i++) {
				dependantRelat=new DependantRelat();
				dependantRelat.DependantRelatNum= PIn.Long  (table.Rows[i]["DependantRelatNum"].ToString());
				dependantRelat.PatNumChild      = PIn.Long  (table.Rows[i]["PatNumChild"].ToString());
				dependantRelat.PatNumRelated    = PIn.Long  (table.Rows[i]["PatNumRelated"].ToString());
				dependantRelat.Relationship     = (FamilyRelationship)PIn.Int(table.Rows[i]["Relationship"].ToString());
				retVal.Add(dependantRelat);
			}
			return retVal;
		}

		///<summary>Inserts one DependantRelat into the database.  Returns the new priKey.</summary>
		internal static long Insert(DependantRelat dependantRelat){
			return Insert(dependantRelat,false);
		}

		///<summary>Inserts one DependantRelat into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(DependantRelat dependantRelat,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				dependantRelat.DependantRelatNum=ReplicationServers.GetKey("dependantrelat","DependantRelatNum");
			}
			string command="INSERT INTO dependantrelat (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="DependantRelatNum,";
			}
			command+="PatNumChild,PatNumRelated,Relationship) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(dependantRelat.DependantRelatNum)+",";
			}
			command+=
				     POut.Long  (dependantRelat.PatNumChild)+","
				+    POut.Long  (dependantRelat.PatNumRelated)+","
				+    POut.Int   ((int)dependantRelat.Relationship)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				dependantRelat.DependantRelatNum=Db.NonQ(command,true);
			}
			return dependantRelat.DependantRelatNum;
		}

		///<summary>Updates one DependantRelat in the database.</summary>
		internal static void Update(DependantRelat dependantRelat){
			string command="UPDATE dependantrelat SET "
				+"PatNumChild      =  "+POut.Long  (dependantRelat.PatNumChild)+", "
				+"PatNumRelated    =  "+POut.Long  (dependantRelat.PatNumRelated)+", "
				+"Relationship     =  "+POut.Int   ((int)dependantRelat.Relationship)+" "
				+"WHERE DependantRelatNum = "+POut.Long(dependantRelat.DependantRelatNum);
			Db.NonQ(command);
		}

		///<summary>Updates one DependantRelat in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(DependantRelat dependantRelat,DependantRelat oldDependantRelat){
			string command="";
			if(dependantRelat.PatNumChild != oldDependantRelat.PatNumChild) {
				if(command!=""){ command+=",";}
				command+="PatNumChild = "+POut.Long(dependantRelat.PatNumChild)+"";
			}
			if(dependantRelat.PatNumRelated != oldDependantRelat.PatNumRelated) {
				if(command!=""){ command+=",";}
				command+="PatNumRelated = "+POut.Long(dependantRelat.PatNumRelated)+"";
			}
			if(dependantRelat.Relationship != oldDependantRelat.Relationship) {
				if(command!=""){ command+=",";}
				command+="Relationship = "+POut.Int   ((int)dependantRelat.Relationship)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE dependantrelat SET "+command
				+" WHERE DependantRelatNum = "+POut.Long(dependantRelat.DependantRelatNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one DependantRelat from the database.</summary>
		internal static void Delete(long dependantRelatNum){
			string command="DELETE FROM dependantrelat "
				+"WHERE DependantRelatNum = "+POut.Long(dependantRelatNum);
			Db.NonQ(command);
		}

	}
}