//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class AggPathCrud {
		///<summary>Gets one AggPath object from the database using the primary key.  Returns null if not found.</summary>
		internal static AggPath SelectOne(long aggPathNum){
			string command="SELECT * FROM aggpath "
				+"WHERE AggPathNum = "+POut.Long(aggPathNum);
			List<AggPath> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one AggPath object from the database using a query.</summary>
		internal static AggPath SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<AggPath> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of AggPath objects from the database using a query.</summary>
		internal static List<AggPath> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<AggPath> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<AggPath> TableToList(DataTable table){
			List<AggPath> retVal=new List<AggPath>();
			AggPath aggPath;
			for(int i=0;i<table.Rows.Count;i++) {
				aggPath=new AggPath();
				aggPath.AggPathNum    = PIn.Long  (table.Rows[i]["AggPathNum"].ToString());
				aggPath.RemoteURI     = PIn.String(table.Rows[i]["RemoteURI"].ToString());
				aggPath.RemoteUserName= PIn.String(table.Rows[i]["RemoteUserName"].ToString());
				aggPath.RemotePassword= PIn.String(table.Rows[i]["RemotePassword"].ToString());
				retVal.Add(aggPath);
			}
			return retVal;
		}

		///<summary>Inserts one AggPath into the database.  Returns the new priKey.</summary>
		internal static long Insert(AggPath aggPath){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				aggPath.AggPathNum=DbHelper.GetNextOracleKey("aggpath","AggPathNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(aggPath,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							aggPath.AggPathNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(aggPath,false);
			}
		}

		///<summary>Inserts one AggPath into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(AggPath aggPath,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				aggPath.AggPathNum=ReplicationServers.GetKey("aggpath","AggPathNum");
			}
			string command="INSERT INTO aggpath (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="AggPathNum,";
			}
			command+="RemoteURI,RemoteUserName,RemotePassword) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(aggPath.AggPathNum)+",";
			}
			command+=
				 "'"+POut.String(aggPath.RemoteURI)+"',"
				+"'"+POut.String(aggPath.RemoteUserName)+"',"
				+"'"+POut.String(aggPath.RemotePassword)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				aggPath.AggPathNum=Db.NonQ(command,true);
			}
			return aggPath.AggPathNum;
		}

		///<summary>Updates one AggPath in the database.</summary>
		internal static void Update(AggPath aggPath){
			string command="UPDATE aggpath SET "
				+"RemoteURI     = '"+POut.String(aggPath.RemoteURI)+"', "
				+"RemoteUserName= '"+POut.String(aggPath.RemoteUserName)+"', "
				+"RemotePassword= '"+POut.String(aggPath.RemotePassword)+"' "
				+"WHERE AggPathNum = "+POut.Long(aggPath.AggPathNum);
			Db.NonQ(command);
		}

		///<summary>Updates one AggPath in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(AggPath aggPath,AggPath oldAggPath){
			string command="";
			if(aggPath.RemoteURI != oldAggPath.RemoteURI) {
				if(command!=""){ command+=",";}
				command+="RemoteURI = '"+POut.String(aggPath.RemoteURI)+"'";
			}
			if(aggPath.RemoteUserName != oldAggPath.RemoteUserName) {
				if(command!=""){ command+=",";}
				command+="RemoteUserName = '"+POut.String(aggPath.RemoteUserName)+"'";
			}
			if(aggPath.RemotePassword != oldAggPath.RemotePassword) {
				if(command!=""){ command+=",";}
				command+="RemotePassword = '"+POut.String(aggPath.RemotePassword)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE aggpath SET "+command
				+" WHERE AggPathNum = "+POut.Long(aggPath.AggPathNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one AggPath from the database.</summary>
		internal static void Delete(long aggPathNum){
			string command="DELETE FROM aggpath "
				+"WHERE AggPathNum = "+POut.Long(aggPathNum);
			Db.NonQ(command);
		}

	}
}