//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class CanadianExtractCrud {
		///<summary>Gets one CanadianExtract object from the database using the primary key.  Returns null if not found.</summary>
		internal static CanadianExtract SelectOne(long canadianExtractNum){
			string command="SELECT * FROM canadianextract "
				+"WHERE CanadianExtractNum = "+POut.Long(canadianExtractNum);
			List<CanadianExtract> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one CanadianExtract object from the database using a query.</summary>
		internal static CanadianExtract SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<CanadianExtract> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of CanadianExtract objects from the database using a query.</summary>
		internal static List<CanadianExtract> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<CanadianExtract> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<CanadianExtract> TableToList(DataTable table){
			List<CanadianExtract> retVal=new List<CanadianExtract>();
			CanadianExtract canadianExtract;
			for(int i=0;i<table.Rows.Count;i++) {
				canadianExtract=new CanadianExtract();
				canadianExtract.CanadianExtractNum= PIn.Long  (table.Rows[i]["CanadianExtractNum"].ToString());
				canadianExtract.ClaimNum          = PIn.Long  (table.Rows[i]["ClaimNum"].ToString());
				canadianExtract.ToothNum          = PIn.String(table.Rows[i]["ToothNum"].ToString());
				canadianExtract.DateExtraction    = PIn.Date  (table.Rows[i]["DateExtraction"].ToString());
				retVal.Add(canadianExtract);
			}
			return retVal;
		}

		///<summary>Inserts one CanadianExtract into the database.  Returns the new priKey.</summary>
		internal static long Insert(CanadianExtract canadianExtract){
			return Insert(canadianExtract,false);
		}

		///<summary>Inserts one CanadianExtract into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(CanadianExtract canadianExtract,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				canadianExtract.CanadianExtractNum=ReplicationServers.GetKey("canadianextract","CanadianExtractNum");
			}
			string command="INSERT INTO canadianextract (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="CanadianExtractNum,";
			}
			command+="ClaimNum,ToothNum,DateExtraction) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(canadianExtract.CanadianExtractNum)+",";
			}
			command+=
				     POut.Long  (canadianExtract.ClaimNum)+","
				+"'"+POut.String(canadianExtract.ToothNum)+"',"
				+    POut.Date  (canadianExtract.DateExtraction)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				canadianExtract.CanadianExtractNum=Db.NonQ(command,true);
			}
			return canadianExtract.CanadianExtractNum;
		}

		///<summary>Updates one CanadianExtract in the database.</summary>
		internal static void Update(CanadianExtract canadianExtract){
			string command="UPDATE canadianextract SET "
				+"ClaimNum          =  "+POut.Long  (canadianExtract.ClaimNum)+", "
				+"ToothNum          = '"+POut.String(canadianExtract.ToothNum)+"', "
				+"DateExtraction    =  "+POut.Date  (canadianExtract.DateExtraction)+" "
				+"WHERE CanadianExtractNum = "+POut.Long(canadianExtract.CanadianExtractNum);
			Db.NonQ(command);
		}

		///<summary>Updates one CanadianExtract in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(CanadianExtract canadianExtract,CanadianExtract oldCanadianExtract){
			string command="";
			if(canadianExtract.ClaimNum != oldCanadianExtract.ClaimNum) {
				if(command!=""){ command+=",";}
				command+="ClaimNum = "+POut.Long(canadianExtract.ClaimNum)+"";
			}
			if(canadianExtract.ToothNum != oldCanadianExtract.ToothNum) {
				if(command!=""){ command+=",";}
				command+="ToothNum = '"+POut.String(canadianExtract.ToothNum)+"'";
			}
			if(canadianExtract.DateExtraction != oldCanadianExtract.DateExtraction) {
				if(command!=""){ command+=",";}
				command+="DateExtraction = "+POut.Date(canadianExtract.DateExtraction)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE canadianextract SET "+command
				+" WHERE CanadianExtractNum = "+POut.Long(canadianExtract.CanadianExtractNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one CanadianExtract from the database.</summary>
		internal static void Delete(long canadianExtractNum){
			string command="DELETE FROM canadianextract "
				+"WHERE CanadianExtractNum = "+POut.Long(canadianExtractNum);
			Db.NonQ(command);
		}

	}
}