//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class MountItemDefCrud {
		///<summary>Gets one MountItemDef object from the database using the primary key.  Returns null if not found.</summary>
		internal static MountItemDef SelectOne(long mountItemDefNum){
			string command="SELECT * FROM mountitemdef "
				+"WHERE MountItemDefNum = "+POut.Long(mountItemDefNum);
			List<MountItemDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one MountItemDef object from the database using a query.</summary>
		internal static MountItemDef SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<MountItemDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one MountItemDef object from the database using a query.</summary>
		internal static List<MountItemDef> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<MountItemDef> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<MountItemDef> TableToList(DataTable table){
			List<MountItemDef> retVal=new List<MountItemDef>();
			MountItemDef obj;
			for(int i=0;i<table.Rows.Count;i++) {
				obj=new MountItemDef();
				obj.MountItemDefNum= PIn.Long  (table.Rows[i]["MountItemDefNum"].ToString());
				obj.MountDefNum    = PIn.Long  (table.Rows[i]["MountDefNum"].ToString());
				obj.Xpos           = PIn.Int   (table.Rows[i]["Xpos"].ToString());
				obj.Ypos           = PIn.Int   (table.Rows[i]["Ypos"].ToString());
				obj.Width          = PIn.Int   (table.Rows[i]["Width"].ToString());
				obj.Height         = PIn.Int   (table.Rows[i]["Height"].ToString());
				retVal.Add(obj);
			}
			return retVal;
		}

		///<summary>Inserts one MountItemDef into the database.  Returns the new priKey.</summary>
		internal static long Insert(MountItemDef obj){
			if(PrefC.RandomKeys) {
				obj.MountItemDefNum=ReplicationServers.GetKey("mountitemdef","MountItemDefNum");
			}
			string command="INSERT INTO mountitemdef (";
			if(PrefC.RandomKeys) {
				command+="MountItemDefNum,";
			}
			command+="MountDefNum,Xpos,Ypos,Width,Height) VALUES(";
			if(PrefC.RandomKeys) {
				command+=POut.Long(obj.MountItemDefNum)+",";
			}
			command+=
				     POut.Long  (obj.MountDefNum)+","
				+    POut.Int   (obj.Xpos)+","
				+    POut.Int   (obj.Ypos)+","
				+    POut.Int   (obj.Width)+","
				+    POut.Int   (obj.Height)+")";
			if(PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				obj.MountItemDefNum=Db.NonQ(command,true);
			}
			return obj.MountItemDefNum;
		}

		///<summary>Updates one MountItemDef in the database.</summary>
		internal static void Update(MountItemDef obj){
			string command="UPDATE mountitemdef SET "
				+"MountDefNum    =  "+POut.Long  (obj.MountDefNum)+", "
				+"Xpos           =  "+POut.Int   (obj.Xpos)+", "
				+"Ypos           =  "+POut.Int   (obj.Ypos)+", "
				+"Width          =  "+POut.Int   (obj.Width)+", "
				+"Height         =  "+POut.Int   (obj.Height)+" "
				+"WHERE MountItemDefNum = "+POut.Long(obj.MountItemDefNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one MountItemDef from the database.</summary>
		internal static void Delete(long mountItemDefNum){
			string command="DELETE FROM mountitemdef "
				+"WHERE MountItemDefNum = "+POut.Long(mountItemDefNum);
			Db.NonQ(command);
		}
	}
}