//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class DeletedObjectCrud {
		///<summary>Gets one DeletedObject object from the database using the primary key.  Returns null if not found.</summary>
		internal static DeletedObject SelectOne(long deletedObjectNum){
			string command="SELECT * FROM deletedobject "
				+"WHERE DeletedObjectNum = "+POut.Long(deletedObjectNum);
			List<DeletedObject> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one DeletedObject object from the database using a query.</summary>
		internal static DeletedObject SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<DeletedObject> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one DeletedObject object from the database using a query.</summary>
		internal static List<DeletedObject> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<DeletedObject> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<DeletedObject> TableToList(DataTable table){
			List<DeletedObject> retVal=new List<DeletedObject>();
			DeletedObject obj;
			for(int i=0;i<table.Rows.Count;i++) {
				obj=new DeletedObject();
				obj.DeletedObjectNum= PIn.Long  (table.Rows[i]["DeletedObjectNum"].ToString());
				obj.ObjectNum       = PIn.Long  (table.Rows[i]["ObjectNum"].ToString());
				obj.ObjectType      = (DeletedObjectType)PIn.Int(table.Rows[i]["ObjectType"].ToString());
				obj.DateTStamp      = PIn.Date  (table.Rows[i]["DateTStamp"].ToString());
				retVal.Add(obj);
			}
			return retVal;
		}

		///<summary>Inserts one DeletedObject into the database.  Returns the new priKey.</summary>
		internal static long Insert(DeletedObject obj){
			if(PrefC.RandomKeys) {
				obj.DeletedObjectNum=ReplicationServers.GetKey("deletedobject","DeletedObjectNum");
			}
			string command="INSERT INTO deletedobject (";
			if(PrefC.RandomKeys) {
				command+="DeletedObjectNum,";
			}
			command+="ObjectNum,ObjectType) VALUES(";
			if(PrefC.RandomKeys) {
				command+=POut.Long(obj.DeletedObjectNum)+",";
			}
			command+=
				     POut.Long  (obj.ObjectNum)+","
				+    POut.Int   ((int)obj.ObjectType)+")";
				//DateTStamp can only be set by MySQL
			if(PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				obj.DeletedObjectNum=Db.NonQ(command,true);
			}
			return obj.DeletedObjectNum;
		}

		///<summary>Updates one DeletedObject in the database.</summary>
		internal static void Update(DeletedObject obj){
			string command="UPDATE deletedobject SET "
				+"ObjectNum       =  "+POut.Long  (obj.ObjectNum)+", "
				+"ObjectType      =  "+POut.Int   ((int)obj.ObjectType)+" "
				//DateTStamp can only be set by MySQL
				+"WHERE DeletedObjectNum = "+POut.Long(obj.DeletedObjectNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one DeletedObject from the database.</summary>
		internal static void Delete(long deletedObjectNum){
			string command="DELETE FROM deletedobject "
				+"WHERE DeletedObjectNum = "+POut.Long(deletedObjectNum);
			Db.NonQ(command);
		}
	}
}