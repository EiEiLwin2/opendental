//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class MountCrud {
		///<summary>Gets one Mount object from the database using the primary key.  Returns null if not found.</summary>
		internal static Mount SelectOne(long mountNum){
			string command="SELECT * FROM mount "
				+"WHERE MountNum = "+POut.Long(mountNum);
			List<Mount> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Mount object from the database using a query.</summary>
		internal static Mount SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Mount> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Mount object from the database using a query.</summary>
		internal static List<Mount> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Mount> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<Mount> TableToList(DataTable table){
			List<Mount> retVal=new List<Mount>();
			Mount obj;
			for(int i=0;i<table.Rows.Count;i++) {
				obj=new Mount();
				obj.MountNum   = PIn.Long  (table.Rows[i]["MountNum"].ToString());
				obj.PatNum     = PIn.Long  (table.Rows[i]["PatNum"].ToString());
				obj.DocCategory= PIn.Long  (table.Rows[i]["DocCategory"].ToString());
				obj.DateCreated= PIn.Date  (table.Rows[i]["DateCreated"].ToString());
				obj.Description= PIn.String(table.Rows[i]["Description"].ToString());
				obj.Note       = PIn.String(table.Rows[i]["Note"].ToString());
				obj.ImgType    = (ImageType)PIn.Int(table.Rows[i]["ImgType"].ToString());
				obj.Width      = PIn.Int   (table.Rows[i]["Width"].ToString());
				obj.Height     = PIn.Int   (table.Rows[i]["Height"].ToString());
				retVal.Add(obj);
			}
			return retVal;
		}

		///<summary>Inserts one Mount into the database.  Returns the new priKey.</summary>
		internal static long Insert(Mount obj){
			if(PrefC.RandomKeys) {
				obj.MountNum=ReplicationServers.GetKey("mount","MountNum");
			}
			string command="INSERT INTO mount (";
			if(PrefC.RandomKeys) {
				command+="MountNum,";
			}
			command+="PatNum,DocCategory,DateCreated,Description,Note,ImgType,Width,Height) VALUES(";
			if(PrefC.RandomKeys) {
				command+=POut.Long(obj.MountNum)+",";
			}
			command+=
				     POut.Long  (obj.PatNum)+","
				+    POut.Long  (obj.DocCategory)+","
				+    POut.Date  (obj.DateCreated)+","
				+"'"+POut.String(obj.Description)+"',"
				+"'"+POut.String(obj.Note)+"',"
				+    POut.Int   ((int)obj.ImgType)+","
				+    POut.Int   (obj.Width)+","
				+    POut.Int   (obj.Height)+")";
			if(PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				obj.MountNum=Db.NonQ(command,true);
			}
			return obj.MountNum;
		}

		///<summary>Updates one Mount in the database.</summary>
		internal static void Update(Mount obj){
			string command="UPDATE mount SET "
				+"PatNum     =  "+POut.Long  (obj.PatNum)+", "
				+"DocCategory=  "+POut.Long  (obj.DocCategory)+", "
				+"DateCreated=  "+POut.Date  (obj.DateCreated)+", "
				+"Description= '"+POut.String(obj.Description)+"', "
				+"Note       = '"+POut.String(obj.Note)+"', "
				+"ImgType    =  "+POut.Int   ((int)obj.ImgType)+", "
				+"Width      =  "+POut.Int   (obj.Width)+", "
				+"Height     =  "+POut.Int   (obj.Height)+" "
				+"WHERE MountNum = "+POut.Long(obj.MountNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one Mount from the database.</summary>
		internal static void Delete(long mountNum){
			string command="DELETE FROM mount "
				+"WHERE MountNum = "+POut.Long(mountNum);
			Db.NonQ(command);
		}
	}
}