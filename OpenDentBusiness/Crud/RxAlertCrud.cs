//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class RxAlertCrud {
		///<summary>Gets one RxAlert object from the database using the primary key.  Returns null if not found.</summary>
		internal static RxAlert SelectOne(long rxAlertNum){
			string command="SELECT * FROM rxalert "
				+"WHERE RxAlertNum = "+POut.Long(rxAlertNum)+" LIMIT 1";
			List<RxAlert> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one RxAlert object from the database using a query.</summary>
		internal static RxAlert SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<RxAlert> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of RxAlert objects from the database using a query.</summary>
		internal static List<RxAlert> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<RxAlert> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<RxAlert> TableToList(DataTable table){
			List<RxAlert> retVal=new List<RxAlert>();
			RxAlert rxAlert;
			for(int i=0;i<table.Rows.Count;i++) {
				rxAlert=new RxAlert();
				rxAlert.RxAlertNum   = PIn.Long  (table.Rows[i]["RxAlertNum"].ToString());
				rxAlert.RxDefNum     = PIn.Long  (table.Rows[i]["RxDefNum"].ToString());
				rxAlert.DiseaseDefNum= PIn.Long  (table.Rows[i]["DiseaseDefNum"].ToString());
				retVal.Add(rxAlert);
			}
			return retVal;
		}

		///<summary>Inserts one RxAlert into the database.  Returns the new priKey.</summary>
		internal static long Insert(RxAlert rxAlert){
			return Insert(rxAlert,false);
		}

		///<summary>Inserts one RxAlert into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(RxAlert rxAlert,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				rxAlert.RxAlertNum=ReplicationServers.GetKey("rxalert","RxAlertNum");
			}
			string command="INSERT INTO rxalert (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="RxAlertNum,";
			}
			command+="RxDefNum,DiseaseDefNum) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(rxAlert.RxAlertNum)+",";
			}
			command+=
				     POut.Long  (rxAlert.RxDefNum)+","
				+    POut.Long  (rxAlert.DiseaseDefNum)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				rxAlert.RxAlertNum=Db.NonQ(command,true);
			}
			return rxAlert.RxAlertNum;
		}

		///<summary>Updates one RxAlert in the database.</summary>
		internal static void Update(RxAlert rxAlert){
			string command="UPDATE rxalert SET "
				+"RxDefNum     =  "+POut.Long  (rxAlert.RxDefNum)+", "
				+"DiseaseDefNum=  "+POut.Long  (rxAlert.DiseaseDefNum)+" "
				+"WHERE RxAlertNum = "+POut.Long(rxAlert.RxAlertNum)+" LIMIT 1";
			Db.NonQ(command);
		}

		///<summary>Updates one RxAlert in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(RxAlert rxAlert,RxAlert oldRxAlert){
			string command="";
			if(rxAlert.RxDefNum != oldRxAlert.RxDefNum) {
				if(command!=""){ command+=",";}
				command+="RxDefNum = "+POut.Long(rxAlert.RxDefNum)+"";
			}
			if(rxAlert.DiseaseDefNum != oldRxAlert.DiseaseDefNum) {
				if(command!=""){ command+=",";}
				command+="DiseaseDefNum = "+POut.Long(rxAlert.DiseaseDefNum)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE rxalert SET "+command
				+" WHERE RxAlertNum = "+POut.Long(rxAlert.RxAlertNum)+" LIMIT 1";
			Db.NonQ(command);
		}

		///<summary>Deletes one RxAlert from the database.</summary>
		internal static void Delete(long rxAlertNum){
			string command="DELETE FROM rxalert "
				+"WHERE RxAlertNum = "+POut.Long(rxAlertNum)+" LIMIT 1";
			Db.NonQ(command);
		}

	}
}