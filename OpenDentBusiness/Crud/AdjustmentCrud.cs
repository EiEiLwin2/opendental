//This file is automatically generated, most recently on 4/21/2010 10:35:24 AM
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class AdjustmentCrud {
		///<summary>Gets one Adjustment object from the database using the primary key.  Returns null if not found.</summary>
		internal static Adjustment SelectOne(long adjNum){
			string command="SELECT * FROM adjustment "
				+"WHERE AdjNum = "+POut.Long(adjNum);
			List<Adjustment> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Adjustment object from the database using a query.</summary>
		internal static Adjustment SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			return null;
		}

		///<summary>Gets one Adjustment object from the database using a query.</summary>
		internal static List<Adjustment> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			return null;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<Adjustment> TableToList(DataTable table){
			List<Adjustment> retVal=new List<Adjustment>();
			Adjustment obj;
			for(int i=0;i<table.Rows.Count;i++) {
				obj=new Adjustment();
				obj.AdjNum   = PIn.Long  (table.Rows[i]["AdjNum"].ToString());
				obj.AdjDate  = PIn.Date  (table.Rows[i]["AdjDate"].ToString());
				obj.AdjAmt   = PIn.Double(table.Rows[i]["AdjAmt"].ToString());
				obj.PatNum   = PIn.Long  (table.Rows[i]["PatNum"].ToString());
				obj.AdjType  = PIn.Long  (table.Rows[i]["AdjType"].ToString());
				obj.ProvNum  = PIn.Long  (table.Rows[i]["ProvNum"].ToString());
				obj.AdjNote  = PIn.String(table.Rows[i]["AdjNote"].ToString());
				obj.ProcDate = PIn.Date  (table.Rows[i]["ProcDate"].ToString());
				obj.ProcNum  = PIn.Long  (table.Rows[i]["ProcNum"].ToString());
				obj.DateEntry= PIn.Date  (table.Rows[i]["DateEntry"].ToString());
				obj.ClinicNum= PIn.Long  (table.Rows[i]["ClinicNum"].ToString());
				retVal.Add(obj);
			}
			return retVal;
		}

		///<summary>Inserts one Adjustment into the database.  Returns the new priKey.</summary>
		internal static long Insert(Adjustment obj){
			return 0;
		}

		///<summary>Updates one Adjustment in the database.</summary>
		internal static void Update(Adjustment obj){

		}

		///<summary>Deletes one Adjustment from the database.  We might decide to not allow this for some tables.</summary>
		internal static void Delete(long adjNum){

		}
	}
}