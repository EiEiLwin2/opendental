//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class DiseaseCrud {
		///<summary>Gets one Disease object from the database using the primary key.  Returns null if not found.</summary>
		internal static Disease SelectOne(long diseaseNum){
			string command="SELECT * FROM disease "
				+"WHERE DiseaseNum = "+POut.Long(diseaseNum)+" LIMIT 1";
			List<Disease> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Disease object from the database using a query.</summary>
		internal static Disease SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Disease> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Disease objects from the database using a query.</summary>
		internal static List<Disease> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Disease> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<Disease> TableToList(DataTable table){
			List<Disease> retVal=new List<Disease>();
			Disease disease;
			for(int i=0;i<table.Rows.Count;i++) {
				disease=new Disease();
				disease.DiseaseNum   = PIn.Long  (table.Rows[i]["DiseaseNum"].ToString());
				disease.PatNum       = PIn.Long  (table.Rows[i]["PatNum"].ToString());
				disease.DiseaseDefNum= PIn.Long  (table.Rows[i]["DiseaseDefNum"].ToString());
				disease.PatNote      = PIn.String(table.Rows[i]["PatNote"].ToString());
				retVal.Add(disease);
			}
			return retVal;
		}

		///<summary>Inserts one Disease into the database.  Returns the new priKey.</summary>
		internal static long Insert(Disease disease){
			return Insert(disease,false);
		}

		///<summary>Inserts one Disease into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(Disease disease,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				disease.DiseaseNum=ReplicationServers.GetKey("disease","DiseaseNum");
			}
			string command="INSERT INTO disease (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="DiseaseNum,";
			}
			command+="PatNum,DiseaseDefNum,PatNote) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(disease.DiseaseNum)+",";
			}
			command+=
				     POut.Long  (disease.PatNum)+","
				+    POut.Long  (disease.DiseaseDefNum)+","
				+"'"+POut.String(disease.PatNote)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				disease.DiseaseNum=Db.NonQ(command,true);
			}
			return disease.DiseaseNum;
		}

		///<summary>Updates one Disease in the database.</summary>
		internal static void Update(Disease disease){
			string command="UPDATE disease SET "
				+"PatNum       =  "+POut.Long  (disease.PatNum)+", "
				+"DiseaseDefNum=  "+POut.Long  (disease.DiseaseDefNum)+", "
				+"PatNote      = '"+POut.String(disease.PatNote)+"' "
				+"WHERE DiseaseNum = "+POut.Long(disease.DiseaseNum);
			Db.NonQ(command);
		}

		///<summary>Updates one Disease in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(Disease disease,Disease oldDisease){
			string command="";
			if(disease.PatNum != oldDisease.PatNum) {
				if(command!=""){ command+=",";}
				command+="PatNum = "+POut.Long(disease.PatNum)+"";
			}
			if(disease.DiseaseDefNum != oldDisease.DiseaseDefNum) {
				if(command!=""){ command+=",";}
				command+="DiseaseDefNum = "+POut.Long(disease.DiseaseDefNum)+"";
			}
			if(disease.PatNote != oldDisease.PatNote) {
				if(command!=""){ command+=",";}
				command+="PatNote = '"+POut.String(disease.PatNote)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE disease SET "+command
				+" WHERE DiseaseNum = "+POut.Long(disease.DiseaseNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one Disease from the database.</summary>
		internal static void Delete(long diseaseNum){
			string command="DELETE FROM disease "
				+"WHERE DiseaseNum = "+POut.Long(diseaseNum);
			Db.NonQ(command);
		}

	}
}