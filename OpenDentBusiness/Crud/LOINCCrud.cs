//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class LOINCCrud {
		///<summary>Gets one LOINC object from the database using the primary key.  Returns null if not found.</summary>
		public static LOINC SelectOne(long lOINCNum){
			string command="SELECT * FROM loinc "
				+"WHERE LOINCNum = "+POut.Long(lOINCNum);
			List<LOINC> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one LOINC object from the database using a query.</summary>
		public static LOINC SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<LOINC> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of LOINC objects from the database using a query.</summary>
		public static List<LOINC> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<LOINC> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<LOINC> TableToList(DataTable table){
			List<LOINC> retVal=new List<LOINC>();
			LOINC lOINC;
			for(int i=0;i<table.Rows.Count;i++) {
				lOINC=new LOINC();
				lOINC.LOINCNum = PIn.Long  (table.Rows[i]["LOINCNum"].ToString());
				lOINC.LOINCCode= PIn.String(table.Rows[i]["LOINCCode"].ToString());
				lOINC.UCUMUnits= PIn.String(table.Rows[i]["UCUMUnits"].ToString());
				lOINC.LongName = PIn.String(table.Rows[i]["LongName"].ToString());
				lOINC.ShortName= PIn.String(table.Rows[i]["ShortName"].ToString());
				lOINC.OrderObs = PIn.String(table.Rows[i]["OrderObs"].ToString());
				retVal.Add(lOINC);
			}
			return retVal;
		}

		///<summary>Inserts one LOINC into the database.  Returns the new priKey.</summary>
		public static long Insert(LOINC lOINC){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				lOINC.LOINCNum=DbHelper.GetNextOracleKey("loinc","LOINCNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(lOINC,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							lOINC.LOINCNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(lOINC,false);
			}
		}

		///<summary>Inserts one LOINC into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(LOINC lOINC,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				lOINC.LOINCNum=ReplicationServers.GetKey("loinc","LOINCNum");
			}
			string command="INSERT INTO loinc (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="LOINCNum,";
			}
			command+="LOINCCode,UCUMUnits,LongName,ShortName,OrderObs) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(lOINC.LOINCNum)+",";
			}
			command+=
				 "'"+POut.String(lOINC.LOINCCode)+"',"
				+"'"+POut.String(lOINC.UCUMUnits)+"',"
				+"'"+POut.String(lOINC.LongName)+"',"
				+"'"+POut.String(lOINC.ShortName)+"',"
				+"'"+POut.String(lOINC.OrderObs)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				lOINC.LOINCNum=Db.NonQ(command,true);
			}
			return lOINC.LOINCNum;
		}

		///<summary>Updates one LOINC in the database.</summary>
		public static void Update(LOINC lOINC){
			string command="UPDATE loinc SET "
				+"LOINCCode= '"+POut.String(lOINC.LOINCCode)+"', "
				+"UCUMUnits= '"+POut.String(lOINC.UCUMUnits)+"', "
				+"LongName = '"+POut.String(lOINC.LongName)+"', "
				+"ShortName= '"+POut.String(lOINC.ShortName)+"', "
				+"OrderObs = '"+POut.String(lOINC.OrderObs)+"' "
				+"WHERE LOINCNum = "+POut.Long(lOINC.LOINCNum);
			Db.NonQ(command);
		}

		///<summary>Updates one LOINC in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		public static void Update(LOINC lOINC,LOINC oldLOINC){
			string command="";
			if(lOINC.LOINCCode != oldLOINC.LOINCCode) {
				if(command!=""){ command+=",";}
				command+="LOINCCode = '"+POut.String(lOINC.LOINCCode)+"'";
			}
			if(lOINC.UCUMUnits != oldLOINC.UCUMUnits) {
				if(command!=""){ command+=",";}
				command+="UCUMUnits = '"+POut.String(lOINC.UCUMUnits)+"'";
			}
			if(lOINC.LongName != oldLOINC.LongName) {
				if(command!=""){ command+=",";}
				command+="LongName = '"+POut.String(lOINC.LongName)+"'";
			}
			if(lOINC.ShortName != oldLOINC.ShortName) {
				if(command!=""){ command+=",";}
				command+="ShortName = '"+POut.String(lOINC.ShortName)+"'";
			}
			if(lOINC.OrderObs != oldLOINC.OrderObs) {
				if(command!=""){ command+=",";}
				command+="OrderObs = '"+POut.String(lOINC.OrderObs)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE loinc SET "+command
				+" WHERE LOINCNum = "+POut.Long(lOINC.LOINCNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one LOINC from the database.</summary>
		public static void Delete(long lOINCNum){
			string command="DELETE FROM loinc "
				+"WHERE LOINCNum = "+POut.Long(lOINCNum);
			Db.NonQ(command);
		}

	}
}