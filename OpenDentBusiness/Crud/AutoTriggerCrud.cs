//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class AutoTriggerCrud {
		///<summary>Gets one AutoTrigger object from the database using the primary key.  Returns null if not found.</summary>
		public static EhrTrigger SelectOne(long automationTriggerNum){
			string command="SELECT * FROM autotrigger "
				+"WHERE AutomationTriggerNum = "+POut.Long(automationTriggerNum);
			List<EhrTrigger> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one AutoTrigger object from the database using a query.</summary>
		public static EhrTrigger SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EhrTrigger> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of AutoTrigger objects from the database using a query.</summary>
		public static List<EhrTrigger> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<EhrTrigger> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<EhrTrigger> TableToList(DataTable table){
			List<EhrTrigger> retVal=new List<EhrTrigger>();
			EhrTrigger autoTrigger;
			for(int i=0;i<table.Rows.Count;i++) {
				autoTrigger=new EhrTrigger();
				autoTrigger.AutomationTriggerNum     = PIn.Long  (table.Rows[i]["AutomationTriggerNum"].ToString());
				autoTrigger.Description              = PIn.String(table.Rows[i]["Description"].ToString());
				autoTrigger.SnomedList               = PIn.String(table.Rows[i]["SnomedList"].ToString());
				autoTrigger.Icd9List                 = PIn.String(table.Rows[i]["Icd9List"].ToString());
				autoTrigger.Icd10List                = PIn.String(table.Rows[i]["Icd10List"].ToString());
				autoTrigger.CvxList                  = PIn.String(table.Rows[i]["CvxList"].ToString());
				autoTrigger.RxCuiList                = PIn.String(table.Rows[i]["RxCuiList"].ToString());
				autoTrigger.LoincList                = PIn.String(table.Rows[i]["LoincList"].ToString());
				autoTrigger.DemographicAgeLessThan   = PIn.Int   (table.Rows[i]["DemographicAgeLessThan"].ToString());
				autoTrigger.DemographicAgeGreaterThan= PIn.Int   (table.Rows[i]["DemographicAgeGreaterThan"].ToString());
				autoTrigger.DemographicGender        = PIn.String(table.Rows[i]["DemographicGender"].ToString());
				autoTrigger.Cardinality              = (MatchCardinality)PIn.Int(table.Rows[i]["Cardinality"].ToString());
				retVal.Add(autoTrigger);
			}
			return retVal;
		}

		///<summary>Inserts one AutoTrigger into the database.  Returns the new priKey.</summary>
		public static long Insert(EhrTrigger autoTrigger){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				autoTrigger.AutomationTriggerNum=DbHelper.GetNextOracleKey("autotrigger","AutomationTriggerNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(autoTrigger,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							autoTrigger.AutomationTriggerNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(autoTrigger,false);
			}
		}

		///<summary>Inserts one AutoTrigger into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(EhrTrigger autoTrigger,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				autoTrigger.AutomationTriggerNum=ReplicationServers.GetKey("autotrigger","AutomationTriggerNum");
			}
			string command="INSERT INTO autotrigger (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="AutomationTriggerNum,";
			}
			command+="Description,SnomedList,Icd9List,Icd10List,CvxList,RxCuiList,LoincList,DemographicAgeLessThan,DemographicAgeGreaterThan,DemographicGender,Cardinality) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(autoTrigger.AutomationTriggerNum)+",";
			}
			command+=
				 "'"+POut.String(autoTrigger.Description)+"',"
				+"'"+POut.String(autoTrigger.SnomedList)+"',"
				+"'"+POut.String(autoTrigger.Icd9List)+"',"
				+"'"+POut.String(autoTrigger.Icd10List)+"',"
				+"'"+POut.String(autoTrigger.CvxList)+"',"
				+"'"+POut.String(autoTrigger.RxCuiList)+"',"
				+"'"+POut.String(autoTrigger.LoincList)+"',"
				+    POut.Int   (autoTrigger.DemographicAgeLessThan)+","
				+    POut.Int   (autoTrigger.DemographicAgeGreaterThan)+","
				+"'"+POut.String(autoTrigger.DemographicGender)+"',"
				+    POut.Int   ((int)autoTrigger.Cardinality)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				autoTrigger.AutomationTriggerNum=Db.NonQ(command,true);
			}
			return autoTrigger.AutomationTriggerNum;
		}

		///<summary>Updates one AutoTrigger in the database.</summary>
		public static void Update(EhrTrigger autoTrigger){
			string command="UPDATE autotrigger SET "
				+"Description              = '"+POut.String(autoTrigger.Description)+"', "
				+"SnomedList               = '"+POut.String(autoTrigger.SnomedList)+"', "
				+"Icd9List                 = '"+POut.String(autoTrigger.Icd9List)+"', "
				+"Icd10List                = '"+POut.String(autoTrigger.Icd10List)+"', "
				+"CvxList                  = '"+POut.String(autoTrigger.CvxList)+"', "
				+"RxCuiList                = '"+POut.String(autoTrigger.RxCuiList)+"', "
				+"LoincList                = '"+POut.String(autoTrigger.LoincList)+"', "
				+"DemographicAgeLessThan   =  "+POut.Int   (autoTrigger.DemographicAgeLessThan)+", "
				+"DemographicAgeGreaterThan=  "+POut.Int   (autoTrigger.DemographicAgeGreaterThan)+", "
				+"DemographicGender        = '"+POut.String(autoTrigger.DemographicGender)+"', "
				+"Cardinality              =  "+POut.Int   ((int)autoTrigger.Cardinality)+" "
				+"WHERE AutomationTriggerNum = "+POut.Long(autoTrigger.AutomationTriggerNum);
			Db.NonQ(command);
		}

		///<summary>Updates one AutoTrigger in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		public static void Update(EhrTrigger autoTrigger,EhrTrigger oldAutoTrigger){
			string command="";
			if(autoTrigger.Description != oldAutoTrigger.Description) {
				if(command!=""){ command+=",";}
				command+="Description = '"+POut.String(autoTrigger.Description)+"'";
			}
			if(autoTrigger.SnomedList != oldAutoTrigger.SnomedList) {
				if(command!=""){ command+=",";}
				command+="SnomedList = '"+POut.String(autoTrigger.SnomedList)+"'";
			}
			if(autoTrigger.Icd9List != oldAutoTrigger.Icd9List) {
				if(command!=""){ command+=",";}
				command+="Icd9List = '"+POut.String(autoTrigger.Icd9List)+"'";
			}
			if(autoTrigger.Icd10List != oldAutoTrigger.Icd10List) {
				if(command!=""){ command+=",";}
				command+="Icd10List = '"+POut.String(autoTrigger.Icd10List)+"'";
			}
			if(autoTrigger.CvxList != oldAutoTrigger.CvxList) {
				if(command!=""){ command+=",";}
				command+="CvxList = '"+POut.String(autoTrigger.CvxList)+"'";
			}
			if(autoTrigger.RxCuiList != oldAutoTrigger.RxCuiList) {
				if(command!=""){ command+=",";}
				command+="RxCuiList = '"+POut.String(autoTrigger.RxCuiList)+"'";
			}
			if(autoTrigger.LoincList != oldAutoTrigger.LoincList) {
				if(command!=""){ command+=",";}
				command+="LoincList = '"+POut.String(autoTrigger.LoincList)+"'";
			}
			if(autoTrigger.DemographicAgeLessThan != oldAutoTrigger.DemographicAgeLessThan) {
				if(command!=""){ command+=",";}
				command+="DemographicAgeLessThan = "+POut.Int(autoTrigger.DemographicAgeLessThan)+"";
			}
			if(autoTrigger.DemographicAgeGreaterThan != oldAutoTrigger.DemographicAgeGreaterThan) {
				if(command!=""){ command+=",";}
				command+="DemographicAgeGreaterThan = "+POut.Int(autoTrigger.DemographicAgeGreaterThan)+"";
			}
			if(autoTrigger.DemographicGender != oldAutoTrigger.DemographicGender) {
				if(command!=""){ command+=",";}
				command+="DemographicGender = '"+POut.String(autoTrigger.DemographicGender)+"'";
			}
			if(autoTrigger.Cardinality != oldAutoTrigger.Cardinality) {
				if(command!=""){ command+=",";}
				command+="Cardinality = "+POut.Int   ((int)autoTrigger.Cardinality)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE autotrigger SET "+command
				+" WHERE AutomationTriggerNum = "+POut.Long(autoTrigger.AutomationTriggerNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one AutoTrigger from the database.</summary>
		public static void Delete(long automationTriggerNum){
			string command="DELETE FROM autotrigger "
				+"WHERE AutomationTriggerNum = "+POut.Long(automationTriggerNum);
			Db.NonQ(command);
		}

	}
}