//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class SchoolCrud {
		///<summary>Gets one School object from the database using the primary key.  Returns null if not found.</summary>
		internal static School SelectOne(long schoolNum){
			string command="SELECT * FROM school "
				+"WHERE SchoolNum = "+POut.Long(schoolNum)+" LIMIT 1";
			List<School> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one School object from the database using a query.</summary>
		internal static School SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<School> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of School objects from the database using a query.</summary>
		internal static List<School> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<School> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<School> TableToList(DataTable table){
			List<School> retVal=new List<School>();
			School school;
			for(int i=0;i<table.Rows.Count;i++) {
				school=new School();
				school.SchoolNum = PIn.Long  (table.Rows[i]["SchoolNum"].ToString());
				school.SchoolName= PIn.String(table.Rows[i]["SchoolName"].ToString());
				school.SchoolCode= PIn.String(table.Rows[i]["SchoolCode"].ToString());
				retVal.Add(school);
			}
			return retVal;
		}

		///<summary>Inserts one School into the database.  Returns the new priKey.</summary>
		internal static long Insert(School school){
			return Insert(school,false);
		}

		///<summary>Inserts one School into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(School school,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				school.SchoolNum=ReplicationServers.GetKey("school","SchoolNum");
			}
			string command="INSERT INTO school (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="SchoolNum,";
			}
			command+="SchoolName,SchoolCode) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(school.SchoolNum)+",";
			}
			command+=
				 "'"+POut.String(school.SchoolName)+"',"
				+"'"+POut.String(school.SchoolCode)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				school.SchoolNum=Db.NonQ(command,true);
			}
			return school.SchoolNum;
		}

		///<summary>Updates one School in the database.</summary>
		internal static void Update(School school){
			string command="UPDATE school SET "
				+"SchoolName= '"+POut.String(school.SchoolName)+"', "
				+"SchoolCode= '"+POut.String(school.SchoolCode)+"' "
				+"WHERE SchoolNum = "+POut.Long(school.SchoolNum)+" LIMIT 1";
			Db.NonQ(command);
		}

		///<summary>Updates one School in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(School school,School oldSchool){
			string command="";
			if(school.SchoolName != oldSchool.SchoolName) {
				if(command!=""){ command+=",";}
				command+="SchoolName = '"+POut.String(school.SchoolName)+"'";
			}
			if(school.SchoolCode != oldSchool.SchoolCode) {
				if(command!=""){ command+=",";}
				command+="SchoolCode = '"+POut.String(school.SchoolCode)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE school SET "+command
				+" WHERE SchoolNum = "+POut.Long(school.SchoolNum)+" LIMIT 1";
			Db.NonQ(command);
		}

		///<summary>Deletes one School from the database.</summary>
		internal static void Delete(long schoolNum){
			string command="DELETE FROM school "
				+"WHERE SchoolNum = "+POut.Long(schoolNum)+" LIMIT 1";
			Db.NonQ(command);
		}

	}
}