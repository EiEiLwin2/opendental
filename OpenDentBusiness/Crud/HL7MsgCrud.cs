//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class HL7MsgCrud {
		///<summary>Gets one HL7Msg object from the database using the primary key.  Returns null if not found.</summary>
		internal static HL7Msg SelectOne(long hL7MsgNum){
			string command="SELECT * FROM hl7msg "
				+"WHERE HL7MsgNum = "+POut.Long(hL7MsgNum);
			List<HL7Msg> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one HL7Msg object from the database using a query.</summary>
		internal static HL7Msg SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<HL7Msg> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one HL7Msg object from the database using a query.</summary>
		internal static List<HL7Msg> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<HL7Msg> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<HL7Msg> TableToList(DataTable table){
			List<HL7Msg> retVal=new List<HL7Msg>();
			HL7Msg obj;
			for(int i=0;i<table.Rows.Count;i++) {
				obj=new HL7Msg();
				obj.HL7MsgNum= PIn.Long  (table.Rows[i]["HL7MsgNum"].ToString());
				obj.HL7Status= (HL7MessageStatus)PIn.Int(table.Rows[i]["HL7Status"].ToString());
				obj.MsgText  = PIn.String(table.Rows[i]["MsgText"].ToString());
				obj.AptNum   = PIn.Long  (table.Rows[i]["AptNum"].ToString());
				retVal.Add(obj);
			}
			return retVal;
		}

		///<summary>Inserts one HL7Msg into the database.  Returns the new priKey.</summary>
		internal static long Insert(HL7Msg obj){
			if(PrefC.RandomKeys) {
				obj.HL7MsgNum=ReplicationServers.GetKey("hl7msg","HL7MsgNum");
			}
			string command="INSERT INTO hl7msg (";
			if(PrefC.RandomKeys) {
				command+="HL7MsgNum,";
			}
			command+="HL7Status,MsgText,AptNum) VALUES(";
			if(PrefC.RandomKeys) {
				command+=POut.Long(obj.HL7MsgNum)+",";
			}
			command+=
				     POut.Int   ((int)obj.HL7Status)+","
				+"'"+POut.String(obj.MsgText)+"',"
				+    POut.Long  (obj.AptNum)+")";
			if(PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				obj.HL7MsgNum=Db.NonQ(command,true);
			}
			return obj.HL7MsgNum;
		}

		///<summary>Updates one HL7Msg in the database.</summary>
		internal static void Update(HL7Msg obj){
			string command="UPDATE hl7msg SET "
				+"HL7Status=  "+POut.Int   ((int)obj.HL7Status)+", "
				+"MsgText  = '"+POut.String(obj.MsgText)+"', "
				+"AptNum   =  "+POut.Long  (obj.AptNum)+" "
				+"WHERE HL7MsgNum = "+POut.Long(obj.HL7MsgNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one HL7Msg from the database.</summary>
		internal static void Delete(long hL7MsgNum){
			string command="DELETE FROM hl7msg "
				+"WHERE HL7MsgNum = "+POut.Long(hL7MsgNum);
			Db.NonQ(command);
		}
	}
}