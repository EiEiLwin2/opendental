//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class MountItemCrud {
		///<summary>Gets one MountItem object from the database using the primary key.  Returns null if not found.</summary>
		internal static MountItem SelectOne(long mountItemNum){
			string command="SELECT * FROM mountitem "
				+"WHERE MountItemNum = "+POut.Long(mountItemNum);
			List<MountItem> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one MountItem object from the database using a query.</summary>
		internal static MountItem SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<MountItem> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one MountItem object from the database using a query.</summary>
		internal static List<MountItem> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<MountItem> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<MountItem> TableToList(DataTable table){
			List<MountItem> retVal=new List<MountItem>();
			MountItem obj;
			for(int i=0;i<table.Rows.Count;i++) {
				obj=new MountItem();
				obj.MountItemNum= PIn.Long  (table.Rows[i]["MountItemNum"].ToString());
				obj.MountNum    = PIn.Long  (table.Rows[i]["MountNum"].ToString());
				obj.Xpos        = PIn.Int   (table.Rows[i]["Xpos"].ToString());
				obj.Ypos        = PIn.Int   (table.Rows[i]["Ypos"].ToString());
				obj.OrdinalPos  = PIn.Int   (table.Rows[i]["OrdinalPos"].ToString());
				obj.Width       = PIn.Int   (table.Rows[i]["Width"].ToString());
				obj.Height      = PIn.Int   (table.Rows[i]["Height"].ToString());
				retVal.Add(obj);
			}
			return retVal;
		}

		///<summary>Inserts one MountItem into the database.  Returns the new priKey.</summary>
		internal static long Insert(MountItem obj){
			if(PrefC.RandomKeys) {
				obj.MountItemNum=ReplicationServers.GetKey("mountitem","MountItemNum");
			}
			string command="INSERT INTO mountitem (";
			if(PrefC.RandomKeys) {
				command+="MountItemNum,";
			}
			command+="MountNum,Xpos,Ypos,OrdinalPos,Width,Height) VALUES(";
			if(PrefC.RandomKeys) {
				command+=POut.Long(obj.MountItemNum)+",";
			}
			command+=
				     POut.Long  (obj.MountNum)+","
				+    POut.Int   (obj.Xpos)+","
				+    POut.Int   (obj.Ypos)+","
				+    POut.Int   (obj.OrdinalPos)+","
				+    POut.Int   (obj.Width)+","
				+    POut.Int   (obj.Height)+")";
			if(PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				obj.MountItemNum=Db.NonQ(command,true);
			}
			return obj.MountItemNum;
		}

		///<summary>Updates one MountItem in the database.</summary>
		internal static void Update(MountItem obj){
			string command="UPDATE mountitem SET "
				+"MountNum    =  "+POut.Long  (obj.MountNum)+", "
				+"Xpos        =  "+POut.Int   (obj.Xpos)+", "
				+"Ypos        =  "+POut.Int   (obj.Ypos)+", "
				+"OrdinalPos  =  "+POut.Int   (obj.OrdinalPos)+", "
				+"Width       =  "+POut.Int   (obj.Width)+", "
				+"Height      =  "+POut.Int   (obj.Height)+" "
				+"WHERE MountItemNum = "+POut.Long(obj.MountItemNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one MountItem from the database.</summary>
		internal static void Delete(long mountItemNum){
			string command="DELETE FROM mountitem "
				+"WHERE MountItemNum = "+POut.Long(mountItemNum);
			Db.NonQ(command);
		}
	}
}