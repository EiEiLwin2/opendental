//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class LaboratoryCrud {
		///<summary>Gets one Laboratory object from the database using the primary key.  Returns null if not found.</summary>
		internal static Laboratory SelectOne(long laboratoryNum){
			string command="SELECT * FROM laboratory "
				+"WHERE LaboratoryNum = "+POut.Long(laboratoryNum);
			List<Laboratory> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Laboratory object from the database using a query.</summary>
		internal static Laboratory SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Laboratory> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Laboratory object from the database using a query.</summary>
		internal static List<Laboratory> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Laboratory> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<Laboratory> TableToList(DataTable table){
			List<Laboratory> retVal=new List<Laboratory>();
			Laboratory laboratory;
			for(int i=0;i<table.Rows.Count;i++) {
				laboratory=new Laboratory();
				laboratory.LaboratoryNum= PIn.Long  (table.Rows[i]["LaboratoryNum"].ToString());
				laboratory.Description  = PIn.String(table.Rows[i]["Description"].ToString());
				laboratory.Phone        = PIn.String(table.Rows[i]["Phone"].ToString());
				laboratory.Notes        = PIn.String(table.Rows[i]["Notes"].ToString());
				laboratory.Slip         = PIn.Long  (table.Rows[i]["Slip"].ToString());
				retVal.Add(laboratory);
			}
			return retVal;
		}

		///<summary>Inserts one Laboratory into the database.  Returns the new priKey.</summary>
		internal static long Insert(Laboratory laboratory){
			return Insert(laboratory,false);
		}

		///<summary>Inserts one Laboratory into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(Laboratory laboratory,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				laboratory.LaboratoryNum=ReplicationServers.GetKey("laboratory","LaboratoryNum");
			}
			string command="INSERT INTO laboratory (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="LaboratoryNum,";
			}
			command+="Description,Phone,Notes,Slip) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(laboratory.LaboratoryNum)+",";
			}
			command+=
				 "'"+POut.String(laboratory.Description)+"',"
				+"'"+POut.String(laboratory.Phone)+"',"
				+"'"+POut.String(laboratory.Notes)+"',"
				+    POut.Long  (laboratory.Slip)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				laboratory.LaboratoryNum=Db.NonQ(command,true);
			}
			return laboratory.LaboratoryNum;
		}

		///<summary>Updates one Laboratory in the database.</summary>
		internal static void Update(Laboratory laboratory){
			string command="UPDATE laboratory SET "
				+"Description  = '"+POut.String(laboratory.Description)+"', "
				+"Phone        = '"+POut.String(laboratory.Phone)+"', "
				+"Notes        = '"+POut.String(laboratory.Notes)+"', "
				+"Slip         =  "+POut.Long  (laboratory.Slip)+" "
				+"WHERE LaboratoryNum = "+POut.Long(laboratory.LaboratoryNum);
			Db.NonQ(command);
		}

		///<summary>Updates one Laboratory in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(Laboratory laboratory,Laboratory oldLaboratory){
			string command="";
			if(laboratory.Description != oldLaboratory.Description) {
				if(command!=""){ command+=",";}
				command+="Description = '"+POut.String(laboratory.Description)+"'";
			}
			if(laboratory.Phone != oldLaboratory.Phone) {
				if(command!=""){ command+=",";}
				command+="Phone = '"+POut.String(laboratory.Phone)+"'";
			}
			if(laboratory.Notes != oldLaboratory.Notes) {
				if(command!=""){ command+=",";}
				command+="Notes = '"+POut.String(laboratory.Notes)+"'";
			}
			if(laboratory.Slip != oldLaboratory.Slip) {
				if(command!=""){ command+=",";}
				command+="Slip = "+POut.Long(laboratory.Slip)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE laboratory SET "+command
				+" WHERE LaboratoryNum = "+POut.Long(laboratory.LaboratoryNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one Laboratory from the database.</summary>
		internal static void Delete(long laboratoryNum){
			string command="DELETE FROM laboratory "
				+"WHERE LaboratoryNum = "+POut.Long(laboratoryNum);
			Db.NonQ(command);
		}

	}
}