//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class AdministrativeSexCrud {
		///<summary>Gets one AdministrativeSex object from the database using the primary key.  Returns null if not found.</summary>
		public static AdministrativeSex SelectOne(long administrativeSexNum){
			string command="SELECT * FROM administrativesex "
				+"WHERE AdministrativeSexNum = "+POut.Long(administrativeSexNum);
			List<AdministrativeSex> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one AdministrativeSex object from the database using a query.</summary>
		public static AdministrativeSex SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<AdministrativeSex> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of AdministrativeSex objects from the database using a query.</summary>
		public static List<AdministrativeSex> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<AdministrativeSex> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<AdministrativeSex> TableToList(DataTable table){
			List<AdministrativeSex> retVal=new List<AdministrativeSex>();
			AdministrativeSex administrativeSex;
			for(int i=0;i<table.Rows.Count;i++) {
				administrativeSex=new AdministrativeSex();
				administrativeSex.AdministrativeSexNum= PIn.Long  (table.Rows[i]["AdministrativeSexNum"].ToString());
				administrativeSex.CodeValue           = PIn.String(table.Rows[i]["CodeValue"].ToString());
				administrativeSex.DescriptionLong     = PIn.String(table.Rows[i]["DescriptionLong"].ToString());
				retVal.Add(administrativeSex);
			}
			return retVal;
		}

		///<summary>Inserts one AdministrativeSex into the database.  Returns the new priKey.</summary>
		public static long Insert(AdministrativeSex administrativeSex){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				administrativeSex.AdministrativeSexNum=DbHelper.GetNextOracleKey("administrativesex","AdministrativeSexNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(administrativeSex,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							administrativeSex.AdministrativeSexNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(administrativeSex,false);
			}
		}

		///<summary>Inserts one AdministrativeSex into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(AdministrativeSex administrativeSex,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				administrativeSex.AdministrativeSexNum=ReplicationServers.GetKey("administrativesex","AdministrativeSexNum");
			}
			string command="INSERT INTO administrativesex (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="AdministrativeSexNum,";
			}
			command+="CodeValue,DescriptionLong) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(administrativeSex.AdministrativeSexNum)+",";
			}
			command+=
				 "'"+POut.String(administrativeSex.CodeValue)+"',"
				+"'"+POut.String(administrativeSex.DescriptionLong)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				administrativeSex.AdministrativeSexNum=Db.NonQ(command,true);
			}
			return administrativeSex.AdministrativeSexNum;
		}

		///<summary>Updates one AdministrativeSex in the database.</summary>
		public static void Update(AdministrativeSex administrativeSex){
			string command="UPDATE administrativesex SET "
				+"CodeValue           = '"+POut.String(administrativeSex.CodeValue)+"', "
				+"DescriptionLong     = '"+POut.String(administrativeSex.DescriptionLong)+"' "
				+"WHERE AdministrativeSexNum = "+POut.Long(administrativeSex.AdministrativeSexNum);
			Db.NonQ(command);
		}

		///<summary>Updates one AdministrativeSex in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		public static void Update(AdministrativeSex administrativeSex,AdministrativeSex oldAdministrativeSex){
			string command="";
			if(administrativeSex.CodeValue != oldAdministrativeSex.CodeValue) {
				if(command!=""){ command+=",";}
				command+="CodeValue = '"+POut.String(administrativeSex.CodeValue)+"'";
			}
			if(administrativeSex.DescriptionLong != oldAdministrativeSex.DescriptionLong) {
				if(command!=""){ command+=",";}
				command+="DescriptionLong = '"+POut.String(administrativeSex.DescriptionLong)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE administrativesex SET "+command
				+" WHERE AdministrativeSexNum = "+POut.Long(administrativeSex.AdministrativeSexNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one AdministrativeSex from the database.</summary>
		public static void Delete(long administrativeSexNum){
			string command="DELETE FROM administrativesex "
				+"WHERE AdministrativeSexNum = "+POut.Long(administrativeSexNum);
			Db.NonQ(command);
		}

	}
}