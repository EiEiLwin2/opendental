//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class CQMCodeCrud {
		///<summary>Gets one CQMCode object from the database using the primary key.  Returns null if not found.</summary>
		public static CQMCode SelectOne(long cQMCodeNum){
			string command="SELECT * FROM cqmcode "
				+"WHERE CQMCodeNum = "+POut.Long(cQMCodeNum);
			List<CQMCode> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one CQMCode object from the database using a query.</summary>
		public static CQMCode SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<CQMCode> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of CQMCode objects from the database using a query.</summary>
		public static List<CQMCode> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<CQMCode> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<CQMCode> TableToList(DataTable table){
			List<CQMCode> retVal=new List<CQMCode>();
			CQMCode cQMCode;
			for(int i=0;i<table.Rows.Count;i++) {
				cQMCode=new CQMCode();
				cQMCode.CQMCodeNum       = PIn.Long  (table.Rows[i]["CQMCodeNum"].ToString());
				cQMCode.CMSID            = PIn.String(table.Rows[i]["CMSID"].ToString());
				cQMCode.ValueSetName     = PIn.String(table.Rows[i]["ValueSetName"].ToString());
				cQMCode.ValueSetOID      = PIn.String(table.Rows[i]["ValueSetOID"].ToString());
				cQMCode.QDMCategory      = PIn.String(table.Rows[i]["QDMCategory"].ToString());
				cQMCode.Code             = PIn.String(table.Rows[i]["Code"].ToString());
				cQMCode.Description      = PIn.String(table.Rows[i]["Description"].ToString());
				cQMCode.CodeSystem       = PIn.String(table.Rows[i]["CodeSystem"].ToString());
				cQMCode.CodeSystemOID    = PIn.String(table.Rows[i]["CodeSystemOID"].ToString());
				cQMCode.CodeSystemVersion= PIn.String(table.Rows[i]["CodeSystemVersion"].ToString());
				retVal.Add(cQMCode);
			}
			return retVal;
		}

		///<summary>Inserts one CQMCode into the database.  Returns the new priKey.</summary>
		public static long Insert(CQMCode cQMCode){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				cQMCode.CQMCodeNum=DbHelper.GetNextOracleKey("cqmcode","CQMCodeNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(cQMCode,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							cQMCode.CQMCodeNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(cQMCode,false);
			}
		}

		///<summary>Inserts one CQMCode into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(CQMCode cQMCode,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				cQMCode.CQMCodeNum=ReplicationServers.GetKey("cqmcode","CQMCodeNum");
			}
			string command="INSERT INTO cqmcode (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="CQMCodeNum,";
			}
			command+="CMSID,ValueSetName,ValueSetOID,QDMCategory,Code,Description,CodeSystem,CodeSystemOID,CodeSystemVersion) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(cQMCode.CQMCodeNum)+",";
			}
			command+=
				 "'"+POut.String(cQMCode.CMSID)+"',"
				+"'"+POut.String(cQMCode.ValueSetName)+"',"
				+"'"+POut.String(cQMCode.ValueSetOID)+"',"
				+"'"+POut.String(cQMCode.QDMCategory)+"',"
				+"'"+POut.String(cQMCode.Code)+"',"
				+DbHelper.ParamChar+"paramDescription,"
				+"'"+POut.String(cQMCode.CodeSystem)+"',"
				+"'"+POut.String(cQMCode.CodeSystemOID)+"',"
				+"'"+POut.String(cQMCode.CodeSystemVersion)+"')";
			if(cQMCode.Description==null) {
				cQMCode.Description="";
			}
			OdSqlParameter paramDescription=new OdSqlParameter("paramDescription",OdDbType.Text,cQMCode.Description);
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramDescription);
			}
			else {
				cQMCode.CQMCodeNum=Db.NonQ(command,true,paramDescription);
			}
			return cQMCode.CQMCodeNum;
		}

		///<summary>Updates one CQMCode in the database.</summary>
		public static void Update(CQMCode cQMCode){
			string command="UPDATE cqmcode SET "
				+"CMSID            = '"+POut.String(cQMCode.CMSID)+"', "
				+"ValueSetName     = '"+POut.String(cQMCode.ValueSetName)+"', "
				+"ValueSetOID      = '"+POut.String(cQMCode.ValueSetOID)+"', "
				+"QDMCategory      = '"+POut.String(cQMCode.QDMCategory)+"', "
				+"Code             = '"+POut.String(cQMCode.Code)+"', "
				+"Description      =  "+DbHelper.ParamChar+"paramDescription, "
				+"CodeSystem       = '"+POut.String(cQMCode.CodeSystem)+"', "
				+"CodeSystemOID    = '"+POut.String(cQMCode.CodeSystemOID)+"', "
				+"CodeSystemVersion= '"+POut.String(cQMCode.CodeSystemVersion)+"' "
				+"WHERE CQMCodeNum = "+POut.Long(cQMCode.CQMCodeNum);
			if(cQMCode.Description==null) {
				cQMCode.Description="";
			}
			OdSqlParameter paramDescription=new OdSqlParameter("paramDescription",OdDbType.Text,cQMCode.Description);
			Db.NonQ(command,paramDescription);
		}

		///<summary>Updates one CQMCode in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		public static void Update(CQMCode cQMCode,CQMCode oldCQMCode){
			string command="";
			if(cQMCode.CMSID != oldCQMCode.CMSID) {
				if(command!=""){ command+=",";}
				command+="CMSID = '"+POut.String(cQMCode.CMSID)+"'";
			}
			if(cQMCode.ValueSetName != oldCQMCode.ValueSetName) {
				if(command!=""){ command+=",";}
				command+="ValueSetName = '"+POut.String(cQMCode.ValueSetName)+"'";
			}
			if(cQMCode.ValueSetOID != oldCQMCode.ValueSetOID) {
				if(command!=""){ command+=",";}
				command+="ValueSetOID = '"+POut.String(cQMCode.ValueSetOID)+"'";
			}
			if(cQMCode.QDMCategory != oldCQMCode.QDMCategory) {
				if(command!=""){ command+=",";}
				command+="QDMCategory = '"+POut.String(cQMCode.QDMCategory)+"'";
			}
			if(cQMCode.Code != oldCQMCode.Code) {
				if(command!=""){ command+=",";}
				command+="Code = '"+POut.String(cQMCode.Code)+"'";
			}
			if(cQMCode.Description != oldCQMCode.Description) {
				if(command!=""){ command+=",";}
				command+="Description = "+DbHelper.ParamChar+"paramDescription";
			}
			if(cQMCode.CodeSystem != oldCQMCode.CodeSystem) {
				if(command!=""){ command+=",";}
				command+="CodeSystem = '"+POut.String(cQMCode.CodeSystem)+"'";
			}
			if(cQMCode.CodeSystemOID != oldCQMCode.CodeSystemOID) {
				if(command!=""){ command+=",";}
				command+="CodeSystemOID = '"+POut.String(cQMCode.CodeSystemOID)+"'";
			}
			if(cQMCode.CodeSystemVersion != oldCQMCode.CodeSystemVersion) {
				if(command!=""){ command+=",";}
				command+="CodeSystemVersion = '"+POut.String(cQMCode.CodeSystemVersion)+"'";
			}
			if(command==""){
				return;
			}
			if(cQMCode.Description==null) {
				cQMCode.Description="";
			}
			OdSqlParameter paramDescription=new OdSqlParameter("paramDescription",OdDbType.Text,cQMCode.Description);
			command="UPDATE cqmcode SET "+command
				+" WHERE CQMCodeNum = "+POut.Long(cQMCode.CQMCodeNum);
			Db.NonQ(command,paramDescription);
		}

		///<summary>Deletes one CQMCode from the database.</summary>
		public static void Delete(long cQMCodeNum){
			string command="DELETE FROM cqmcode "
				+"WHERE CQMCodeNum = "+POut.Long(cQMCodeNum);
			Db.NonQ(command);
		}

	}
}