//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class DocumentCrud {
		///<summary>Gets one Document object from the database using the primary key.  Returns null if not found.</summary>
		internal static Document SelectOne(long docNum){
			string command="SELECT * FROM document "
				+"WHERE DocNum = "+POut.Long(docNum);
			List<Document> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Document object from the database using a query.</summary>
		internal static Document SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Document> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Document object from the database using a query.</summary>
		internal static List<Document> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Document> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<Document> TableToList(DataTable table){
			List<Document> retVal=new List<Document>();
			Document obj;
			for(int i=0;i<table.Rows.Count;i++) {
				obj=new Document();
				obj.DocNum        = PIn.Long  (table.Rows[i]["DocNum"].ToString());
				obj.Description   = PIn.String(table.Rows[i]["Description"].ToString());
				obj.DateCreated   = PIn.Date  (table.Rows[i]["DateCreated"].ToString());
				obj.DocCategory   = PIn.Long  (table.Rows[i]["DocCategory"].ToString());
				obj.PatNum        = PIn.Long  (table.Rows[i]["PatNum"].ToString());
				obj.FileName      = PIn.String(table.Rows[i]["FileName"].ToString());
				obj.ImgType       = (ImageType)PIn.Int(table.Rows[i]["ImgType"].ToString());
				obj.IsFlipped     = PIn.Bool  (table.Rows[i]["IsFlipped"].ToString());
				obj.DegreesRotated= PIn.Int   (table.Rows[i]["DegreesRotated"].ToString());
				obj.ToothNumbers  = PIn.String(table.Rows[i]["ToothNumbers"].ToString());
				obj.Note          = PIn.String(table.Rows[i]["Note"].ToString());
				obj.SigIsTopaz    = PIn.Bool  (table.Rows[i]["SigIsTopaz"].ToString());
				obj.Signature     = PIn.String(table.Rows[i]["Signature"].ToString());
				obj.CropX         = PIn.Int   (table.Rows[i]["CropX"].ToString());
				obj.CropY         = PIn.Int   (table.Rows[i]["CropY"].ToString());
				obj.CropW         = PIn.Int   (table.Rows[i]["CropW"].ToString());
				obj.CropH         = PIn.Int   (table.Rows[i]["CropH"].ToString());
				obj.WindowingMin  = PIn.Int   (table.Rows[i]["WindowingMin"].ToString());
				obj.WindowingMax  = PIn.Int   (table.Rows[i]["WindowingMax"].ToString());
				obj.MountItemNum  = PIn.Long  (table.Rows[i]["MountItemNum"].ToString());
				obj.DateTStamp    = PIn.Date  (table.Rows[i]["DateTStamp"].ToString());
				retVal.Add(obj);
			}
			return retVal;
		}

		///<summary>Inserts one Document into the database.  Returns the new priKey.</summary>
		internal static long Insert(Document obj){
			if(PrefC.RandomKeys) {
				obj.DocNum=ReplicationServers.GetKey("document","DocNum");
			}
			string command="INSERT INTO document (";
			if(PrefC.RandomKeys) {
				command+="DocNum,";
			}
			command+="Description,DateCreated,DocCategory,PatNum,FileName,ImgType,IsFlipped,DegreesRotated,ToothNumbers,Note,SigIsTopaz,Signature,CropX,CropY,CropW,CropH,WindowingMin,WindowingMax,MountItemNum) VALUES(";
			if(PrefC.RandomKeys) {
				command+=POut.Long(obj.DocNum)+",";
			}
			command+=
				 "'"+POut.String(obj.Description)+"',"
				+    POut.Date  (obj.DateCreated)+","
				+    POut.Long  (obj.DocCategory)+","
				+    POut.Long  (obj.PatNum)+","
				+"'"+POut.String(obj.FileName)+"',"
				+    POut.Int   ((int)obj.ImgType)+","
				+    POut.Bool  (obj.IsFlipped)+","
				+    POut.Int   (obj.DegreesRotated)+","
				+"'"+POut.String(obj.ToothNumbers)+"',"
				+"'"+POut.String(obj.Note)+"',"
				+    POut.Bool  (obj.SigIsTopaz)+","
				+"'"+POut.String(obj.Signature)+"',"
				+    POut.Int   (obj.CropX)+","
				+    POut.Int   (obj.CropY)+","
				+    POut.Int   (obj.CropW)+","
				+    POut.Int   (obj.CropH)+","
				+    POut.Int   (obj.WindowingMin)+","
				+    POut.Int   (obj.WindowingMax)+","
				+    POut.Long  (obj.MountItemNum)+")";
				//DateTStamp can only be set by MySQL
			if(PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				obj.DocNum=Db.NonQ(command,true);
			}
			return obj.DocNum;
		}

		///<summary>Updates one Document in the database.</summary>
		internal static void Update(Document obj){
			string command="UPDATE document SET "
				+"Description   = '"+POut.String(obj.Description)+"', "
				+"DateCreated   =  "+POut.Date  (obj.DateCreated)+", "
				+"DocCategory   =  "+POut.Long  (obj.DocCategory)+", "
				+"PatNum        =  "+POut.Long  (obj.PatNum)+", "
				+"FileName      = '"+POut.String(obj.FileName)+"', "
				+"ImgType       =  "+POut.Int   ((int)obj.ImgType)+", "
				+"IsFlipped     =  "+POut.Bool  (obj.IsFlipped)+", "
				+"DegreesRotated=  "+POut.Int   (obj.DegreesRotated)+", "
				+"ToothNumbers  = '"+POut.String(obj.ToothNumbers)+"', "
				+"Note          = '"+POut.String(obj.Note)+"', "
				+"SigIsTopaz    =  "+POut.Bool  (obj.SigIsTopaz)+", "
				+"Signature     = '"+POut.String(obj.Signature)+"', "
				+"CropX         =  "+POut.Int   (obj.CropX)+", "
				+"CropY         =  "+POut.Int   (obj.CropY)+", "
				+"CropW         =  "+POut.Int   (obj.CropW)+", "
				+"CropH         =  "+POut.Int   (obj.CropH)+", "
				+"WindowingMin  =  "+POut.Int   (obj.WindowingMin)+", "
				+"WindowingMax  =  "+POut.Int   (obj.WindowingMax)+", "
				+"MountItemNum  =  "+POut.Long  (obj.MountItemNum)+" "
				//DateTStamp can only be set by MySQL
				+"WHERE DocNum = "+POut.Long(obj.DocNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one Document from the database.</summary>
		internal static void Delete(long docNum){
			string command="DELETE FROM document "
				+"WHERE DocNum = "+POut.Long(docNum);
			Db.NonQ(command);
		}
	}
}