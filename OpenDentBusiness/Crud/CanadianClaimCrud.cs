//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class CanadianClaimCrud {
		///<summary>Gets one CanadianClaim object from the database using the primary key.  Returns null if not found.</summary>
		internal static CanadianClaim SelectOne(long claimNum){
			string command="SELECT * FROM canadianclaim "
				+"WHERE ClaimNum = "+POut.Long(claimNum);
			List<CanadianClaim> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one CanadianClaim object from the database using a query.</summary>
		internal static CanadianClaim SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<CanadianClaim> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of CanadianClaim objects from the database using a query.</summary>
		internal static List<CanadianClaim> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<CanadianClaim> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<CanadianClaim> TableToList(DataTable table){
			List<CanadianClaim> retVal=new List<CanadianClaim>();
			CanadianClaim canadianClaim;
			for(int i=0;i<table.Rows.Count;i++) {
				canadianClaim=new CanadianClaim();
				canadianClaim.ClaimNum           = PIn.Long  (table.Rows[i]["ClaimNum"].ToString());
				canadianClaim.MaterialsForwarded = PIn.String(table.Rows[i]["MaterialsForwarded"].ToString());
				canadianClaim.ReferralProviderNum= PIn.String(table.Rows[i]["ReferralProviderNum"].ToString());
				canadianClaim.ReferralReason     = PIn.Byte  (table.Rows[i]["ReferralReason"].ToString());
				canadianClaim.SecondaryCoverage  = PIn.String(table.Rows[i]["SecondaryCoverage"].ToString());
				canadianClaim.IsInitialLower     = PIn.String(table.Rows[i]["IsInitialLower"].ToString());
				canadianClaim.DateInitialLower   = PIn.Date  (table.Rows[i]["DateInitialLower"].ToString());
				canadianClaim.MandProsthMaterial = PIn.Byte  (table.Rows[i]["MandProsthMaterial"].ToString());
				canadianClaim.IsInitialUpper     = PIn.String(table.Rows[i]["IsInitialUpper"].ToString());
				canadianClaim.DateInitialUpper   = PIn.Date  (table.Rows[i]["DateInitialUpper"].ToString());
				canadianClaim.MaxProsthMaterial  = PIn.Byte  (table.Rows[i]["MaxProsthMaterial"].ToString());
				canadianClaim.EligibilityCode    = PIn.Byte  (table.Rows[i]["EligibilityCode"].ToString());
				canadianClaim.SchoolName         = PIn.String(table.Rows[i]["SchoolName"].ToString());
				canadianClaim.PayeeCode          = PIn.Byte  (table.Rows[i]["PayeeCode"].ToString());
				retVal.Add(canadianClaim);
			}
			return retVal;
		}

		///<summary>Inserts one CanadianClaim into the database.  Returns the new priKey.</summary>
		internal static long Insert(CanadianClaim canadianClaim){
			return Insert(canadianClaim,false);
		}

		///<summary>Inserts one CanadianClaim into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(CanadianClaim canadianClaim,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				canadianClaim.ClaimNum=ReplicationServers.GetKey("canadianclaim","ClaimNum");
			}
			string command="INSERT INTO canadianclaim (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ClaimNum,";
			}
			command+="MaterialsForwarded,ReferralProviderNum,ReferralReason,SecondaryCoverage,IsInitialLower,DateInitialLower,MandProsthMaterial,IsInitialUpper,DateInitialUpper,MaxProsthMaterial,EligibilityCode,SchoolName,PayeeCode) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(canadianClaim.ClaimNum)+",";
			}
			command+=
				 "'"+POut.String(canadianClaim.MaterialsForwarded)+"',"
				+"'"+POut.String(canadianClaim.ReferralProviderNum)+"',"
				+    POut.Byte  (canadianClaim.ReferralReason)+","
				+"'"+POut.String(canadianClaim.SecondaryCoverage)+"',"
				+"'"+POut.String(canadianClaim.IsInitialLower)+"',"
				+    POut.Date  (canadianClaim.DateInitialLower)+","
				+    POut.Byte  (canadianClaim.MandProsthMaterial)+","
				+"'"+POut.String(canadianClaim.IsInitialUpper)+"',"
				+    POut.Date  (canadianClaim.DateInitialUpper)+","
				+    POut.Byte  (canadianClaim.MaxProsthMaterial)+","
				+    POut.Byte  (canadianClaim.EligibilityCode)+","
				+"'"+POut.String(canadianClaim.SchoolName)+"',"
				+    POut.Byte  (canadianClaim.PayeeCode)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				canadianClaim.ClaimNum=Db.NonQ(command,true);
			}
			return canadianClaim.ClaimNum;
		}

		///<summary>Updates one CanadianClaim in the database.</summary>
		internal static void Update(CanadianClaim canadianClaim){
			string command="UPDATE canadianclaim SET "
				+"MaterialsForwarded = '"+POut.String(canadianClaim.MaterialsForwarded)+"', "
				+"ReferralProviderNum= '"+POut.String(canadianClaim.ReferralProviderNum)+"', "
				+"ReferralReason     =  "+POut.Byte  (canadianClaim.ReferralReason)+", "
				+"SecondaryCoverage  = '"+POut.String(canadianClaim.SecondaryCoverage)+"', "
				+"IsInitialLower     = '"+POut.String(canadianClaim.IsInitialLower)+"', "
				+"DateInitialLower   =  "+POut.Date  (canadianClaim.DateInitialLower)+", "
				+"MandProsthMaterial =  "+POut.Byte  (canadianClaim.MandProsthMaterial)+", "
				+"IsInitialUpper     = '"+POut.String(canadianClaim.IsInitialUpper)+"', "
				+"DateInitialUpper   =  "+POut.Date  (canadianClaim.DateInitialUpper)+", "
				+"MaxProsthMaterial  =  "+POut.Byte  (canadianClaim.MaxProsthMaterial)+", "
				+"EligibilityCode    =  "+POut.Byte  (canadianClaim.EligibilityCode)+", "
				+"SchoolName         = '"+POut.String(canadianClaim.SchoolName)+"', "
				+"PayeeCode          =  "+POut.Byte  (canadianClaim.PayeeCode)+" "
				+"WHERE ClaimNum = "+POut.Long(canadianClaim.ClaimNum);
			Db.NonQ(command);
		}

		///<summary>Updates one CanadianClaim in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(CanadianClaim canadianClaim,CanadianClaim oldCanadianClaim){
			string command="";
			if(canadianClaim.MaterialsForwarded != oldCanadianClaim.MaterialsForwarded) {
				if(command!=""){ command+=",";}
				command+="MaterialsForwarded = '"+POut.String(canadianClaim.MaterialsForwarded)+"'";
			}
			if(canadianClaim.ReferralProviderNum != oldCanadianClaim.ReferralProviderNum) {
				if(command!=""){ command+=",";}
				command+="ReferralProviderNum = '"+POut.String(canadianClaim.ReferralProviderNum)+"'";
			}
			if(canadianClaim.ReferralReason != oldCanadianClaim.ReferralReason) {
				if(command!=""){ command+=",";}
				command+="ReferralReason = "+POut.Byte(canadianClaim.ReferralReason)+"";
			}
			if(canadianClaim.SecondaryCoverage != oldCanadianClaim.SecondaryCoverage) {
				if(command!=""){ command+=",";}
				command+="SecondaryCoverage = '"+POut.String(canadianClaim.SecondaryCoverage)+"'";
			}
			if(canadianClaim.IsInitialLower != oldCanadianClaim.IsInitialLower) {
				if(command!=""){ command+=",";}
				command+="IsInitialLower = '"+POut.String(canadianClaim.IsInitialLower)+"'";
			}
			if(canadianClaim.DateInitialLower != oldCanadianClaim.DateInitialLower) {
				if(command!=""){ command+=",";}
				command+="DateInitialLower = "+POut.Date(canadianClaim.DateInitialLower)+"";
			}
			if(canadianClaim.MandProsthMaterial != oldCanadianClaim.MandProsthMaterial) {
				if(command!=""){ command+=",";}
				command+="MandProsthMaterial = "+POut.Byte(canadianClaim.MandProsthMaterial)+"";
			}
			if(canadianClaim.IsInitialUpper != oldCanadianClaim.IsInitialUpper) {
				if(command!=""){ command+=",";}
				command+="IsInitialUpper = '"+POut.String(canadianClaim.IsInitialUpper)+"'";
			}
			if(canadianClaim.DateInitialUpper != oldCanadianClaim.DateInitialUpper) {
				if(command!=""){ command+=",";}
				command+="DateInitialUpper = "+POut.Date(canadianClaim.DateInitialUpper)+"";
			}
			if(canadianClaim.MaxProsthMaterial != oldCanadianClaim.MaxProsthMaterial) {
				if(command!=""){ command+=",";}
				command+="MaxProsthMaterial = "+POut.Byte(canadianClaim.MaxProsthMaterial)+"";
			}
			if(canadianClaim.EligibilityCode != oldCanadianClaim.EligibilityCode) {
				if(command!=""){ command+=",";}
				command+="EligibilityCode = "+POut.Byte(canadianClaim.EligibilityCode)+"";
			}
			if(canadianClaim.SchoolName != oldCanadianClaim.SchoolName) {
				if(command!=""){ command+=",";}
				command+="SchoolName = '"+POut.String(canadianClaim.SchoolName)+"'";
			}
			if(canadianClaim.PayeeCode != oldCanadianClaim.PayeeCode) {
				if(command!=""){ command+=",";}
				command+="PayeeCode = "+POut.Byte(canadianClaim.PayeeCode)+"";
			}
			if(command==""){
				return;
			}
			command="UPDATE canadianclaim SET "+command
				+" WHERE ClaimNum = "+POut.Long(canadianClaim.ClaimNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one CanadianClaim from the database.</summary>
		internal static void Delete(long claimNum){
			string command="DELETE FROM canadianclaim "
				+"WHERE ClaimNum = "+POut.Long(claimNum);
			Db.NonQ(command);
		}

	}
}