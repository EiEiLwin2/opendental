//This file is automatically generated, most recently on 4/21/2010 9:44:42 PM
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class FeeSchedCrud {
		///<summary>Gets one FeeSched object from the database using the primary key.  Returns null if not found.</summary>
		internal static FeeSched SelectOne(long feeSchedNum){
			string command="SELECT * FROM feesched "
				+"WHERE FeeSchedNum = "+POut.Long(feeSchedNum);
			List<FeeSched> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one FeeSched object from the database using a query.</summary>
		internal static FeeSched SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<FeeSched> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one FeeSched object from the database using a query.</summary>
		internal static List<FeeSched> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<FeeSched> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<FeeSched> TableToList(DataTable table){
			List<FeeSched> retVal=new List<FeeSched>();
			FeeSched obj;
			for(int i=0;i<table.Rows.Count;i++) {
				obj=new FeeSched();
				obj.FeeSchedNum = PIn.Long  (table.Rows[i]["FeeSchedNum"].ToString());
				obj.Description = PIn.String(table.Rows[i]["Description"].ToString());
				obj.FeeSchedType= (FeeScheduleType)PIn.Int(table.Rows[i]["FeeSchedType"].ToString());
				obj.ItemOrder   = PIn.Int   (table.Rows[i]["ItemOrder"].ToString());
				obj.IsHidden    = PIn.Bool  (table.Rows[i]["IsHidden"].ToString());
				retVal.Add(obj);
			}
			return retVal;
		}

		///<summary>Inserts one FeeSched into the database.  Returns the new priKey.</summary>
		internal static long Insert(FeeSched obj){
			if(PrefC.RandomKeys) {
				obj.FeeSchedNum=ReplicationServers.GetKey("feesched","FeeSchedNum");
			}
			string command="INSERT INTO feesched (";
			if(PrefC.RandomKeys) {
				command+="FeeSchedNum,";
			}
			command+="Description,FeeSchedType,ItemOrder,IsHidden) VALUES(";
			if(PrefC.RandomKeys) {
				command+=POut.Long(obj.FeeSchedNum)+",";
			}
			command+=
				 "'"+POut.String(obj.Description)+"',"
				+    POut.Int   ((int)obj.FeeSchedType)+","
				+    POut.Int   (obj.ItemOrder)+","
				+    POut.Bool  (obj.IsHidden)+")";
			if(PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				obj.FeeSchedNum=Db.NonQ(command,true);
			}
			return obj.FeeSchedNum;
		}

		///<summary>Updates one FeeSched in the database.</summary>
		internal static void Update(FeeSched obj){
			string command="UPDATE feesched SET "
				+"Description = '"+POut.String(obj.Description)+"', "
				+"FeeSchedType=  "+POut.Int   ((int)obj.FeeSchedType)+", "
				+"ItemOrder   =  "+POut.Int   (obj.ItemOrder)+", "
				+"IsHidden    =  "+POut.Bool  (obj.IsHidden)+" "
				+"WHERE FeeSchedNum = "+POut.Long(obj.FeeSchedNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one FeeSched from the database.</summary>
		internal static void Delete(long feeSchedNum){
			string command="DELETE FROM feesched "
				+"WHERE FeeSchedNum = "+POut.Long(feeSchedNum);
			Db.NonQ(command);
		}
	}
}