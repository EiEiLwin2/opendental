//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class HL7DefMessageCrud {
		///<summary>Gets one HL7DefMessage object from the database using the primary key.  Returns null if not found.</summary>
		internal static HL7DefMessage SelectOne(long hL7DefMessageNum){
			string command="SELECT * FROM hl7defmessage "
				+"WHERE HL7DefMessageNum = "+POut.Long(hL7DefMessageNum);
			List<HL7DefMessage> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one HL7DefMessage object from the database using a query.</summary>
		internal static HL7DefMessage SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<HL7DefMessage> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of HL7DefMessage objects from the database using a query.</summary>
		internal static List<HL7DefMessage> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<HL7DefMessage> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<HL7DefMessage> TableToList(DataTable table){
			List<HL7DefMessage> retVal=new List<HL7DefMessage>();
			HL7DefMessage hL7DefMessage;
			for(int i=0;i<table.Rows.Count;i++) {
				hL7DefMessage=new HL7DefMessage();
				hL7DefMessage.HL7DefMessageNum= PIn.Long  (table.Rows[i]["HL7DefMessageNum"].ToString());
				hL7DefMessage.HL7DefNum       = PIn.Long  (table.Rows[i]["HL7DefNum"].ToString());
				hL7DefMessage.MessageType     = (MessageTypeHL7)PIn.Int(table.Rows[i]["MessageType"].ToString());
				hL7DefMessage.EventType       = (EventTypeHL7)PIn.Int(table.Rows[i]["EventType"].ToString());
				hL7DefMessage.InOrOut         = (InOutHL7)PIn.Int(table.Rows[i]["InOrOut"].ToString());
				hL7DefMessage.ItemOrder       = PIn.Int   (table.Rows[i]["ItemOrder"].ToString());
				hL7DefMessage.Note            = PIn.String(table.Rows[i]["Note"].ToString());
				retVal.Add(hL7DefMessage);
			}
			return retVal;
		}

		///<summary>Inserts one HL7DefMessage into the database.  Returns the new priKey.</summary>
		internal static long Insert(HL7DefMessage hL7DefMessage){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				hL7DefMessage.HL7DefMessageNum=DbHelper.GetNextOracleKey("hl7defmessage","HL7DefMessageNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(hL7DefMessage,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							hL7DefMessage.HL7DefMessageNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(hL7DefMessage,false);
			}
		}

		///<summary>Inserts one HL7DefMessage into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(HL7DefMessage hL7DefMessage,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				hL7DefMessage.HL7DefMessageNum=ReplicationServers.GetKey("hl7defmessage","HL7DefMessageNum");
			}
			string command="INSERT INTO hl7defmessage (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="HL7DefMessageNum,";
			}
			command+="HL7DefNum,MessageType,EventType,InOrOut,ItemOrder,Note) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(hL7DefMessage.HL7DefMessageNum)+",";
			}
			command+=
				     POut.Long  (hL7DefMessage.HL7DefNum)+","
				+    POut.Int   ((int)hL7DefMessage.MessageType)+","
				+    POut.Int   ((int)hL7DefMessage.EventType)+","
				+    POut.Int   ((int)hL7DefMessage.InOrOut)+","
				+    POut.Int   (hL7DefMessage.ItemOrder)+","
				+"'"+POut.String(hL7DefMessage.Note)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				hL7DefMessage.HL7DefMessageNum=Db.NonQ(command,true);
			}
			return hL7DefMessage.HL7DefMessageNum;
		}

		///<summary>Updates one HL7DefMessage in the database.</summary>
		internal static void Update(HL7DefMessage hL7DefMessage){
			string command="UPDATE hl7defmessage SET "
				+"HL7DefNum       =  "+POut.Long  (hL7DefMessage.HL7DefNum)+", "
				+"MessageType     =  "+POut.Int   ((int)hL7DefMessage.MessageType)+", "
				+"EventType       =  "+POut.Int   ((int)hL7DefMessage.EventType)+", "
				+"InOrOut         =  "+POut.Int   ((int)hL7DefMessage.InOrOut)+", "
				+"ItemOrder       =  "+POut.Int   (hL7DefMessage.ItemOrder)+", "
				+"Note            = '"+POut.String(hL7DefMessage.Note)+"' "
				+"WHERE HL7DefMessageNum = "+POut.Long(hL7DefMessage.HL7DefMessageNum);
			Db.NonQ(command);
		}

		///<summary>Updates one HL7DefMessage in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(HL7DefMessage hL7DefMessage,HL7DefMessage oldHL7DefMessage){
			string command="";
			if(hL7DefMessage.HL7DefNum != oldHL7DefMessage.HL7DefNum) {
				if(command!=""){ command+=",";}
				command+="HL7DefNum = "+POut.Long(hL7DefMessage.HL7DefNum)+"";
			}
			if(hL7DefMessage.MessageType != oldHL7DefMessage.MessageType) {
				if(command!=""){ command+=",";}
				command+="MessageType = "+POut.Int   ((int)hL7DefMessage.MessageType)+"";
			}
			if(hL7DefMessage.EventType != oldHL7DefMessage.EventType) {
				if(command!=""){ command+=",";}
				command+="EventType = "+POut.Int   ((int)hL7DefMessage.EventType)+"";
			}
			if(hL7DefMessage.InOrOut != oldHL7DefMessage.InOrOut) {
				if(command!=""){ command+=",";}
				command+="InOrOut = "+POut.Int   ((int)hL7DefMessage.InOrOut)+"";
			}
			if(hL7DefMessage.ItemOrder != oldHL7DefMessage.ItemOrder) {
				if(command!=""){ command+=",";}
				command+="ItemOrder = "+POut.Int(hL7DefMessage.ItemOrder)+"";
			}
			if(hL7DefMessage.Note != oldHL7DefMessage.Note) {
				if(command!=""){ command+=",";}
				command+="Note = '"+POut.String(hL7DefMessage.Note)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE hl7defmessage SET "+command
				+" WHERE HL7DefMessageNum = "+POut.Long(hL7DefMessage.HL7DefMessageNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one HL7DefMessage from the database.</summary>
		internal static void Delete(long hL7DefMessageNum){
			string command="DELETE FROM hl7defmessage "
				+"WHERE HL7DefMessageNum = "+POut.Long(hL7DefMessageNum);
			Db.NonQ(command);
		}

	}
}