//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class InsFilingCodeSubtypeCrud {
		///<summary>Gets one InsFilingCodeSubtype object from the database using the primary key.  Returns null if not found.</summary>
		internal static InsFilingCodeSubtype SelectOne(long insFilingCodeSubtypeNum){
			string command="SELECT * FROM insfilingcodesubtype "
				+"WHERE InsFilingCodeSubtypeNum = "+POut.Long(insFilingCodeSubtypeNum);
			List<InsFilingCodeSubtype> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one InsFilingCodeSubtype object from the database using a query.</summary>
		internal static InsFilingCodeSubtype SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<InsFilingCodeSubtype> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one InsFilingCodeSubtype object from the database using a query.</summary>
		internal static List<InsFilingCodeSubtype> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<InsFilingCodeSubtype> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<InsFilingCodeSubtype> TableToList(DataTable table){
			List<InsFilingCodeSubtype> retVal=new List<InsFilingCodeSubtype>();
			InsFilingCodeSubtype obj;
			for(int i=0;i<table.Rows.Count;i++) {
				obj=new InsFilingCodeSubtype();
				obj.InsFilingCodeSubtypeNum= PIn.Long  (table.Rows[i]["InsFilingCodeSubtypeNum"].ToString());
				obj.InsFilingCodeNum       = PIn.Long  (table.Rows[i]["InsFilingCodeNum"].ToString());
				obj.Descript               = PIn.String(table.Rows[i]["Descript"].ToString());
				retVal.Add(obj);
			}
			return retVal;
		}

		///<summary>Inserts one InsFilingCodeSubtype into the database.  Returns the new priKey.</summary>
		internal static long Insert(InsFilingCodeSubtype obj){
			if(PrefC.RandomKeys) {
				obj.InsFilingCodeSubtypeNum=ReplicationServers.GetKey("insfilingcodesubtype","InsFilingCodeSubtypeNum");
			}
			string command="INSERT INTO insfilingcodesubtype (";
			if(PrefC.RandomKeys) {
				command+="InsFilingCodeSubtypeNum,";
			}
			command+="InsFilingCodeNum,Descript) VALUES(";
			if(PrefC.RandomKeys) {
				command+=POut.Long(obj.InsFilingCodeSubtypeNum)+",";
			}
			command+=
				     POut.Long  (obj.InsFilingCodeNum)+","
				+"'"+POut.String(obj.Descript)+"')";
			if(PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				obj.InsFilingCodeSubtypeNum=Db.NonQ(command,true);
			}
			return obj.InsFilingCodeSubtypeNum;
		}

		///<summary>Updates one InsFilingCodeSubtype in the database.</summary>
		internal static void Update(InsFilingCodeSubtype obj){
			string command="UPDATE insfilingcodesubtype SET "
				+"InsFilingCodeNum       =  "+POut.Long  (obj.InsFilingCodeNum)+", "
				+"Descript               = '"+POut.String(obj.Descript)+"' "
				+"WHERE InsFilingCodeSubtypeNum = "+POut.Long(obj.InsFilingCodeSubtypeNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one InsFilingCodeSubtype from the database.</summary>
		internal static void Delete(long insFilingCodeSubtypeNum){
			string command="DELETE FROM insfilingcodesubtype "
				+"WHERE InsFilingCodeSubtypeNum = "+POut.Long(insFilingCodeSubtypeNum);
			Db.NonQ(command);
		}
	}
}