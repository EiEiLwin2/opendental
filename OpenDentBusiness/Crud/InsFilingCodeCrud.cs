//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class InsFilingCodeCrud {
		///<summary>Gets one InsFilingCode object from the database using the primary key.  Returns null if not found.</summary>
		internal static InsFilingCode SelectOne(long insFilingCodeNum){
			string command="SELECT * FROM insfilingcode "
				+"WHERE InsFilingCodeNum = "+POut.Long(insFilingCodeNum);
			List<InsFilingCode> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one InsFilingCode object from the database using a query.</summary>
		internal static InsFilingCode SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<InsFilingCode> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one InsFilingCode object from the database using a query.</summary>
		internal static List<InsFilingCode> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<InsFilingCode> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<InsFilingCode> TableToList(DataTable table){
			List<InsFilingCode> retVal=new List<InsFilingCode>();
			InsFilingCode obj;
			for(int i=0;i<table.Rows.Count;i++) {
				obj=new InsFilingCode();
				obj.InsFilingCodeNum= PIn.Long  (table.Rows[i]["InsFilingCodeNum"].ToString());
				obj.Descript        = PIn.String(table.Rows[i]["Descript"].ToString());
				obj.EclaimCode      = PIn.String(table.Rows[i]["EclaimCode"].ToString());
				obj.ItemOrder       = PIn.Int   (table.Rows[i]["ItemOrder"].ToString());
				retVal.Add(obj);
			}
			return retVal;
		}

		///<summary>Inserts one InsFilingCode into the database.  Returns the new priKey.</summary>
		internal static long Insert(InsFilingCode obj){
			if(PrefC.RandomKeys) {
				obj.InsFilingCodeNum=ReplicationServers.GetKey("insfilingcode","InsFilingCodeNum");
			}
			string command="INSERT INTO insfilingcode (";
			if(PrefC.RandomKeys) {
				command+="InsFilingCodeNum,";
			}
			command+="Descript,EclaimCode,ItemOrder) VALUES(";
			if(PrefC.RandomKeys) {
				command+=POut.Long(obj.InsFilingCodeNum)+",";
			}
			command+=
				 "'"+POut.String(obj.Descript)+"',"
				+"'"+POut.String(obj.EclaimCode)+"',"
				+    POut.Int   (obj.ItemOrder)+")";
			if(PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				obj.InsFilingCodeNum=Db.NonQ(command,true);
			}
			return obj.InsFilingCodeNum;
		}

		///<summary>Updates one InsFilingCode in the database.</summary>
		internal static void Update(InsFilingCode obj){
			string command="UPDATE insfilingcode SET "
				+"Descript        = '"+POut.String(obj.Descript)+"', "
				+"EclaimCode      = '"+POut.String(obj.EclaimCode)+"', "
				+"ItemOrder       =  "+POut.Int   (obj.ItemOrder)+" "
				+"WHERE InsFilingCodeNum = "+POut.Long(obj.InsFilingCodeNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one InsFilingCode from the database.</summary>
		internal static void Delete(long insFilingCodeNum){
			string command="DELETE FROM insfilingcode "
				+"WHERE InsFilingCodeNum = "+POut.Long(insFilingCodeNum);
			Db.NonQ(command);
		}
	}
}