//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	internal class PhoneEmpDefaultCrud {
		///<summary>Gets one PhoneEmpDefault object from the database using the primary key.  Returns null if not found.</summary>
		internal static PhoneEmpDefault SelectOne(long employeeNum){
			string command="SELECT * FROM phoneempdefault "
				+"WHERE EmployeeNum = "+POut.Long(employeeNum)+" LIMIT 1";
			List<PhoneEmpDefault> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one PhoneEmpDefault object from the database using a query.</summary>
		internal static PhoneEmpDefault SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<PhoneEmpDefault> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of PhoneEmpDefault objects from the database using a query.</summary>
		internal static List<PhoneEmpDefault> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<PhoneEmpDefault> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		internal static List<PhoneEmpDefault> TableToList(DataTable table){
			List<PhoneEmpDefault> retVal=new List<PhoneEmpDefault>();
			PhoneEmpDefault phoneEmpDefault;
			for(int i=0;i<table.Rows.Count;i++) {
				phoneEmpDefault=new PhoneEmpDefault();
				phoneEmpDefault.EmployeeNum= PIn.Long  (table.Rows[i]["EmployeeNum"].ToString());
				phoneEmpDefault.NoGraph    = PIn.Bool  (table.Rows[i]["NoGraph"].ToString());
				phoneEmpDefault.NoColor    = PIn.Bool  (table.Rows[i]["NoColor"].ToString());
				phoneEmpDefault.RingGroups = (AsteriskRingGroups)PIn.Int(table.Rows[i]["RingGroups"].ToString());
				phoneEmpDefault.EmpName    = PIn.String(table.Rows[i]["EmpName"].ToString());
				retVal.Add(phoneEmpDefault);
			}
			return retVal;
		}

		///<summary>Inserts one PhoneEmpDefault into the database.  Returns the new priKey.</summary>
		internal static long Insert(PhoneEmpDefault phoneEmpDefault){
			return Insert(phoneEmpDefault,false);
		}

		///<summary>Inserts one PhoneEmpDefault into the database.  Provides option to use the existing priKey.</summary>
		internal static long Insert(PhoneEmpDefault phoneEmpDefault,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				phoneEmpDefault.EmployeeNum=ReplicationServers.GetKey("phoneempdefault","EmployeeNum");
			}
			string command="INSERT INTO phoneempdefault (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="EmployeeNum,";
			}
			command+="NoGraph,NoColor,RingGroups,EmpName) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(phoneEmpDefault.EmployeeNum)+",";
			}
			command+=
				     POut.Bool  (phoneEmpDefault.NoGraph)+","
				+    POut.Bool  (phoneEmpDefault.NoColor)+","
				+    POut.Int   ((int)phoneEmpDefault.RingGroups)+","
				+"'"+POut.String(phoneEmpDefault.EmpName)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				phoneEmpDefault.EmployeeNum=Db.NonQ(command,true);
			}
			return phoneEmpDefault.EmployeeNum;
		}

		///<summary>Updates one PhoneEmpDefault in the database.</summary>
		internal static void Update(PhoneEmpDefault phoneEmpDefault){
			string command="UPDATE phoneempdefault SET "
				+"NoGraph    =  "+POut.Bool  (phoneEmpDefault.NoGraph)+", "
				+"NoColor    =  "+POut.Bool  (phoneEmpDefault.NoColor)+", "
				+"RingGroups =  "+POut.Int   ((int)phoneEmpDefault.RingGroups)+", "
				+"EmpName    = '"+POut.String(phoneEmpDefault.EmpName)+"' "
				+"WHERE EmployeeNum = "+POut.Long(phoneEmpDefault.EmployeeNum);
			Db.NonQ(command);
		}

		///<summary>Updates one PhoneEmpDefault in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.</summary>
		internal static void Update(PhoneEmpDefault phoneEmpDefault,PhoneEmpDefault oldPhoneEmpDefault){
			string command="";
			if(phoneEmpDefault.NoGraph != oldPhoneEmpDefault.NoGraph) {
				if(command!=""){ command+=",";}
				command+="NoGraph = "+POut.Bool(phoneEmpDefault.NoGraph)+"";
			}
			if(phoneEmpDefault.NoColor != oldPhoneEmpDefault.NoColor) {
				if(command!=""){ command+=",";}
				command+="NoColor = "+POut.Bool(phoneEmpDefault.NoColor)+"";
			}
			if(phoneEmpDefault.RingGroups != oldPhoneEmpDefault.RingGroups) {
				if(command!=""){ command+=",";}
				command+="RingGroups = "+POut.Int   ((int)phoneEmpDefault.RingGroups)+"";
			}
			if(phoneEmpDefault.EmpName != oldPhoneEmpDefault.EmpName) {
				if(command!=""){ command+=",";}
				command+="EmpName = '"+POut.String(phoneEmpDefault.EmpName)+"'";
			}
			if(command==""){
				return;
			}
			command="UPDATE phoneempdefault SET "+command
				+" WHERE EmployeeNum = "+POut.Long(phoneEmpDefault.EmployeeNum);
			Db.NonQ(command);
		}

		///<summary>Deletes one PhoneEmpDefault from the database.</summary>
		internal static void Delete(long employeeNum){
			string command="DELETE FROM phoneempdefault "
				+"WHERE EmployeeNum = "+POut.Long(employeeNum);
			Db.NonQ(command);
		}

	}
}