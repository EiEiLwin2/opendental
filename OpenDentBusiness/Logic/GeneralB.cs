using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using System.Xml;

namespace OpenDentBusiness {
	public class GeneralB {
		///<summary></summary>
		public static DataSet GetTable(string command) {
			DataConnection dcon=new DataConnection();
			DataTable table=dcon.GetTable(command);
			DataSet retVal=new DataSet();
			//table.TableName="table";
			retVal.Tables.Add(table);
			//retVal.Tables[0].TableName="";
			return retVal;
		}

		///<summary>Only used if using the server component.  This is used for queries written by the user.  It uses the user with lower privileges  to prevent injection attack.</summary>
		public static DataSet GetTableLow(string command) {
			DataConnection dcon=new DataConnection(true);
			DataTable table=dcon.GetTable(command);
			DataSet retVal=new DataSet();
			retVal.Tables.Add(table);
			return retVal;
		}

		///<summary>This query is run with full privileges.  This is for commands generated by the main program, and the user will not have access for injection attacks.  Result is usually number of rows changed, or can be insert id if requested.</summary>
		public static int NonQ(string command,bool getInsertID) {
			DataConnection dcon=new DataConnection();
			int rowsChanged=dcon.NonQ(command,getInsertID);
			if(getInsertID){
				return dcon.InsertID;
			}
			else{
				return rowsChanged;
			}
		}

		public static int NonQ(string command){
			return NonQ(command,false);
		}

		/*
		///<summary>This query is run with full privileges.</summary>
		public static int NonQ(string[] commands) {
			DataConnection dcon=new DataConnection();
			
			int rowsChanged=dcon.NonQ(cmd);
			return rowsChanged;//I don't think this will be accurate
		}*/

		///<summary>This is for multiple queries all concatenated together with ;</summary>
		public static DataSet GetDataSet(string commands){
			DataConnection dcon=new DataConnection();
			//DataTable table=dcon.GetTable(command);
			DataSet retVal=dcon.GetDs(commands);
			//retVal.Tables.Add(table);
			return retVal;
		}

		///<summary>This is is only here for compatibility with the old 3-tier architecture.  Do not add to this.</summary>
		public static DataSet GetDS(MethodName methodName, object[] parameters) {
			switch (methodName){
				default:
					throw new ApplicationException("MethodName not found");
				case MethodName.AccountModule_GetAll:
					return AccountModuleB.GetAll((int)parameters[0],(bool)parameters[1],(DateTime)parameters[2],(DateTime)parameters[3],(bool)parameters[4]);
				case MethodName.AccountModule_GetPayPlanAmort:
					return AccountModuleB.GetPayPlanAmort((int)parameters[0]);
				case  MethodName.AccountModule_GetStatement:
					return AccountModuleB.GetStatement((int)parameters[0],(bool)parameters[1],(DateTime)parameters[2],(DateTime)parameters[3],(bool)parameters[4]);
				case  MethodName.Appointment_GetApptEdit:
					return AppointmentB.GetApptEdit((int)parameters[0]);
				case  MethodName.Appointment_RefreshPeriod:
					return AppointmentB.RefreshPeriod((DateTime)parameters[0],(DateTime)parameters[1]);
				case  MethodName.Appointment_RefreshOneApt:
					return AppointmentB.RefreshOneApt((int)parameters[0],(bool)parameters[1]);
				case  MethodName.Chart_GetAll:
					return ChartModuleB.GetAll((int)parameters[0],(bool)parameters[1]);
				case  MethodName.Definition_Refresh:
					return Defs.Refresh();
				case  MethodName.Providers_RefreshOnServer:
					return Providers.RefreshOnServer();
			}

		}

	
		


	}

	
}
