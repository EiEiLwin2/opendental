//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace OpenDental.PatientPortal {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
	using OpenDentBusiness;
	using OpenDentBusiness.Mobile;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PatientPortalSoap", Namespace="http://opendental.com/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TableBase))]
    public partial class PatientPortal : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ServiceExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerNumOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsPaidCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAllRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchMedicationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchMedicationPatsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchAllergiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchAllergyDefsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchDiseasesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchDiseaseDefsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchICD9sOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PatientPortal() {
            this.Url = global::OpenDental.Properties.Settings.Default.OpenDental_PatientPortal_PatientPortal;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ServiceExistsCompletedEventHandler ServiceExistsCompleted;
        
        /// <remarks/>
        public event GetCustomerNumCompletedEventHandler GetCustomerNumCompleted;
        
        /// <remarks/>
        public event IsPaidCustomerCompletedEventHandler IsPaidCustomerCompleted;
        
        /// <remarks/>
        public event DeleteAllRecordsCompletedEventHandler DeleteAllRecordsCompleted;
        
        /// <remarks/>
        public event SynchMedicationsCompletedEventHandler SynchMedicationsCompleted;
        
        /// <remarks/>
        public event SynchMedicationPatsCompletedEventHandler SynchMedicationPatsCompleted;
        
        /// <remarks/>
        public event SynchAllergiesCompletedEventHandler SynchAllergiesCompleted;
        
        /// <remarks/>
        public event SynchAllergyDefsCompletedEventHandler SynchAllergyDefsCompleted;
        
        /// <remarks/>
        public event SynchDiseasesCompletedEventHandler SynchDiseasesCompleted;
        
        /// <remarks/>
        public event SynchDiseaseDefsCompletedEventHandler SynchDiseaseDefsCompleted;
        
        /// <remarks/>
        public event SynchICD9sCompletedEventHandler SynchICD9sCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/ServiceExists", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ServiceExists() {
            object[] results = this.Invoke("ServiceExists", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ServiceExistsAsync() {
            this.ServiceExistsAsync(null);
        }
        
        /// <remarks/>
        public void ServiceExistsAsync(object userState) {
            if ((this.ServiceExistsOperationCompleted == null)) {
                this.ServiceExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceExistsOperationCompleted);
            }
            this.InvokeAsync("ServiceExists", new object[0], this.ServiceExistsOperationCompleted, userState);
        }
        
        private void OnServiceExistsOperationCompleted(object arg) {
            if ((this.ServiceExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServiceExistsCompleted(this, new ServiceExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/GetCustomerNum", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetCustomerNum(string RegistrationKeyFromDentalOffice) {
            object[] results = this.Invoke("GetCustomerNum", new object[] {
                        RegistrationKeyFromDentalOffice});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerNumAsync(string RegistrationKeyFromDentalOffice) {
            this.GetCustomerNumAsync(RegistrationKeyFromDentalOffice, null);
        }
        
        /// <remarks/>
        public void GetCustomerNumAsync(string RegistrationKeyFromDentalOffice, object userState) {
            if ((this.GetCustomerNumOperationCompleted == null)) {
                this.GetCustomerNumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerNumOperationCompleted);
            }
            this.InvokeAsync("GetCustomerNum", new object[] {
                        RegistrationKeyFromDentalOffice}, this.GetCustomerNumOperationCompleted, userState);
        }
        
        private void OnGetCustomerNumOperationCompleted(object arg) {
            if ((this.GetCustomerNumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerNumCompleted(this, new GetCustomerNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/IsPaidCustomer", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsPaidCustomer(string RegistrationKey) {
            object[] results = this.Invoke("IsPaidCustomer", new object[] {
                        RegistrationKey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsPaidCustomerAsync(string RegistrationKey) {
            this.IsPaidCustomerAsync(RegistrationKey, null);
        }
        
        /// <remarks/>
        public void IsPaidCustomerAsync(string RegistrationKey, object userState) {
            if ((this.IsPaidCustomerOperationCompleted == null)) {
                this.IsPaidCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPaidCustomerOperationCompleted);
            }
            this.InvokeAsync("IsPaidCustomer", new object[] {
                        RegistrationKey}, this.IsPaidCustomerOperationCompleted, userState);
        }
        
        private void OnIsPaidCustomerOperationCompleted(object arg) {
            if ((this.IsPaidCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsPaidCustomerCompleted(this, new IsPaidCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/DeleteAllRecords", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAllRecords(string RegistrationKey) {
            this.Invoke("DeleteAllRecords", new object[] {
                        RegistrationKey});
        }
        
        /// <remarks/>
        public void DeleteAllRecordsAsync(string RegistrationKey) {
            this.DeleteAllRecordsAsync(RegistrationKey, null);
        }
        
        /// <remarks/>
        public void DeleteAllRecordsAsync(string RegistrationKey, object userState) {
            if ((this.DeleteAllRecordsOperationCompleted == null)) {
                this.DeleteAllRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAllRecordsOperationCompleted);
            }
            this.InvokeAsync("DeleteAllRecords", new object[] {
                        RegistrationKey}, this.DeleteAllRecordsOperationCompleted, userState);
        }
        
        private void OnDeleteAllRecordsOperationCompleted(object arg) {
            if ((this.DeleteAllRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAllRecordsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchMedications", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchMedications(string RegistrationKey, Medicationm[] medicationmList) {
            this.Invoke("SynchMedications", new object[] {
                        RegistrationKey,
                        medicationmList});
        }
        
        /// <remarks/>
        public void SynchMedicationsAsync(string RegistrationKey, Medicationm[] medicationmList) {
            this.SynchMedicationsAsync(RegistrationKey, medicationmList, null);
        }
        
        /// <remarks/>
        public void SynchMedicationsAsync(string RegistrationKey, Medicationm[] medicationmList, object userState) {
            if ((this.SynchMedicationsOperationCompleted == null)) {
                this.SynchMedicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchMedicationsOperationCompleted);
            }
            this.InvokeAsync("SynchMedications", new object[] {
                        RegistrationKey,
                        medicationmList}, this.SynchMedicationsOperationCompleted, userState);
        }
        
        private void OnSynchMedicationsOperationCompleted(object arg) {
            if ((this.SynchMedicationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchMedicationsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchMedicationPats", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchMedicationPats(string RegistrationKey, MedicationPatm[] medicationPatList) {
            this.Invoke("SynchMedicationPats", new object[] {
                        RegistrationKey,
                        medicationPatList});
        }
        
        /// <remarks/>
        public void SynchMedicationPatsAsync(string RegistrationKey, MedicationPatm[] medicationPatList) {
            this.SynchMedicationPatsAsync(RegistrationKey, medicationPatList, null);
        }
        
        /// <remarks/>
        public void SynchMedicationPatsAsync(string RegistrationKey, MedicationPatm[] medicationPatList, object userState) {
            if ((this.SynchMedicationPatsOperationCompleted == null)) {
                this.SynchMedicationPatsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchMedicationPatsOperationCompleted);
            }
            this.InvokeAsync("SynchMedicationPats", new object[] {
                        RegistrationKey,
                        medicationPatList}, this.SynchMedicationPatsOperationCompleted, userState);
        }
        
        private void OnSynchMedicationPatsOperationCompleted(object arg) {
            if ((this.SynchMedicationPatsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchMedicationPatsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchAllergies", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchAllergies(string RegistrationKey, Allergym[] allergyList) {
            this.Invoke("SynchAllergies", new object[] {
                        RegistrationKey,
                        allergyList});
        }
        
        /// <remarks/>
        public void SynchAllergiesAsync(string RegistrationKey, Allergym[] allergyList) {
            this.SynchAllergiesAsync(RegistrationKey, allergyList, null);
        }
        
        /// <remarks/>
        public void SynchAllergiesAsync(string RegistrationKey, Allergym[] allergyList, object userState) {
            if ((this.SynchAllergiesOperationCompleted == null)) {
                this.SynchAllergiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchAllergiesOperationCompleted);
            }
            this.InvokeAsync("SynchAllergies", new object[] {
                        RegistrationKey,
                        allergyList}, this.SynchAllergiesOperationCompleted, userState);
        }
        
        private void OnSynchAllergiesOperationCompleted(object arg) {
            if ((this.SynchAllergiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchAllergiesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchAllergyDefs", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchAllergyDefs(string RegistrationKey, AllergyDefm[] allergyDefList) {
            this.Invoke("SynchAllergyDefs", new object[] {
                        RegistrationKey,
                        allergyDefList});
        }
        
        /// <remarks/>
        public void SynchAllergyDefsAsync(string RegistrationKey, AllergyDefm[] allergyDefList) {
            this.SynchAllergyDefsAsync(RegistrationKey, allergyDefList, null);
        }
        
        /// <remarks/>
        public void SynchAllergyDefsAsync(string RegistrationKey, AllergyDefm[] allergyDefList, object userState) {
            if ((this.SynchAllergyDefsOperationCompleted == null)) {
                this.SynchAllergyDefsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchAllergyDefsOperationCompleted);
            }
            this.InvokeAsync("SynchAllergyDefs", new object[] {
                        RegistrationKey,
                        allergyDefList}, this.SynchAllergyDefsOperationCompleted, userState);
        }
        
        private void OnSynchAllergyDefsOperationCompleted(object arg) {
            if ((this.SynchAllergyDefsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchAllergyDefsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchDiseases", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchDiseases(string RegistrationKey, Diseasem[] diseaseList) {
            this.Invoke("SynchDiseases", new object[] {
                        RegistrationKey,
                        diseaseList});
        }
        
        /// <remarks/>
        public void SynchDiseasesAsync(string RegistrationKey, Diseasem[] diseaseList) {
            this.SynchDiseasesAsync(RegistrationKey, diseaseList, null);
        }
        
        /// <remarks/>
        public void SynchDiseasesAsync(string RegistrationKey, Diseasem[] diseaseList, object userState) {
            if ((this.SynchDiseasesOperationCompleted == null)) {
                this.SynchDiseasesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchDiseasesOperationCompleted);
            }
            this.InvokeAsync("SynchDiseases", new object[] {
                        RegistrationKey,
                        diseaseList}, this.SynchDiseasesOperationCompleted, userState);
        }
        
        private void OnSynchDiseasesOperationCompleted(object arg) {
            if ((this.SynchDiseasesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchDiseasesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchDiseaseDefs", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchDiseaseDefs(string RegistrationKey, DiseaseDefm[] diseaseDefList) {
            this.Invoke("SynchDiseaseDefs", new object[] {
                        RegistrationKey,
                        diseaseDefList});
        }
        
        /// <remarks/>
        public void SynchDiseaseDefsAsync(string RegistrationKey, DiseaseDefm[] diseaseDefList) {
            this.SynchDiseaseDefsAsync(RegistrationKey, diseaseDefList, null);
        }
        
        /// <remarks/>
        public void SynchDiseaseDefsAsync(string RegistrationKey, DiseaseDefm[] diseaseDefList, object userState) {
            if ((this.SynchDiseaseDefsOperationCompleted == null)) {
                this.SynchDiseaseDefsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchDiseaseDefsOperationCompleted);
            }
            this.InvokeAsync("SynchDiseaseDefs", new object[] {
                        RegistrationKey,
                        diseaseDefList}, this.SynchDiseaseDefsOperationCompleted, userState);
        }
        
        private void OnSynchDiseaseDefsOperationCompleted(object arg) {
            if ((this.SynchDiseaseDefsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchDiseaseDefsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchICD9s", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchICD9s(string RegistrationKey, ICD9m[] icd9List) {
            this.Invoke("SynchICD9s", new object[] {
                        RegistrationKey,
                        icd9List});
        }
        
        /// <remarks/>
        public void SynchICD9sAsync(string RegistrationKey, ICD9m[] icd9List) {
            this.SynchICD9sAsync(RegistrationKey, icd9List, null);
        }
        
        /// <remarks/>
        public void SynchICD9sAsync(string RegistrationKey, ICD9m[] icd9List, object userState) {
            if ((this.SynchICD9sOperationCompleted == null)) {
                this.SynchICD9sOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchICD9sOperationCompleted);
            }
            this.InvokeAsync("SynchICD9s", new object[] {
                        RegistrationKey,
                        icd9List}, this.SynchICD9sOperationCompleted, userState);
        }
        
        private void OnSynchICD9sOperationCompleted(object arg) {
            if ((this.SynchICD9sCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchICD9sCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ServiceExistsCompletedEventHandler(object sender, ServiceExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ServiceExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerNumCompletedEventHandler(object sender, GetCustomerNumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerNumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerNumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IsPaidCustomerCompletedEventHandler(object sender, IsPaidCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsPaidCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsPaidCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteAllRecordsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SynchMedicationsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SynchMedicationPatsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SynchAllergiesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SynchAllergyDefsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SynchDiseasesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SynchDiseaseDefsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SynchICD9sCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591