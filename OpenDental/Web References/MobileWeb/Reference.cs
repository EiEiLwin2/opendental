//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace OpenDental.MobileWeb {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
	using OpenDentBusiness;
	using OpenDentBusiness.Mobile;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MobileSoap", Namespace="http://opendental.com/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TableBase))]
    public partial class Mobile : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ServiceExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRecordCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchRecordsTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchRecordsTestV2OperationCompleted;
        
        private System.Threading.SendOrPostCallback SynchRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetMobileWebPasswordOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Mobile() {
            this.Url = global::OpenDental.Properties.Settings.Default.OpenDental_MobileWeb_Mobile;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ServiceExistsCompletedEventHandler ServiceExistsCompleted;
        
        /// <remarks/>
        public event GetRecordCountCompletedEventHandler GetRecordCountCompleted;
        
        /// <remarks/>
        public event SynchRecordsTestCompletedEventHandler SynchRecordsTestCompleted;
        
        /// <remarks/>
        public event SynchRecordsTestV2CompletedEventHandler SynchRecordsTestV2Completed;
        
        /// <remarks/>
        public event SynchRecordsCompletedEventHandler SynchRecordsCompleted;
        
        /// <remarks/>
        public event DeleteRecordsCompletedEventHandler DeleteRecordsCompleted;
        
        /// <remarks/>
        public event SetMobileWebPasswordCompletedEventHandler SetMobileWebPasswordCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/ServiceExists", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ServiceExists() {
            object[] results = this.Invoke("ServiceExists", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ServiceExistsAsync() {
            this.ServiceExistsAsync(null);
        }
        
        /// <remarks/>
        public void ServiceExistsAsync(object userState) {
            if ((this.ServiceExistsOperationCompleted == null)) {
                this.ServiceExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServiceExistsOperationCompleted);
            }
            this.InvokeAsync("ServiceExists", new object[0], this.ServiceExistsOperationCompleted, userState);
        }
        
        private void OnServiceExistsOperationCompleted(object arg) {
            if ((this.ServiceExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServiceExistsCompleted(this, new ServiceExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/GetRecordCount", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetRecordCount(string RegistrationKey, Patientm[] patientmList) {
            object[] results = this.Invoke("GetRecordCount", new object[] {
                        RegistrationKey,
                        patientmList});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetRecordCountAsync(string RegistrationKey, Patientm[] patientmList) {
            this.GetRecordCountAsync(RegistrationKey, patientmList, null);
        }
        
        /// <remarks/>
        public void GetRecordCountAsync(string RegistrationKey, Patientm[] patientmList, object userState) {
            if ((this.GetRecordCountOperationCompleted == null)) {
                this.GetRecordCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRecordCountOperationCompleted);
            }
            this.InvokeAsync("GetRecordCount", new object[] {
                        RegistrationKey,
                        patientmList}, this.GetRecordCountOperationCompleted, userState);
        }
        
        private void OnGetRecordCountOperationCompleted(object arg) {
            if ((this.GetRecordCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRecordCountCompleted(this, new GetRecordCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchRecordsTest", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchRecordsTest(string RegistrationKey) {
            this.Invoke("SynchRecordsTest", new object[] {
                        RegistrationKey});
        }
        
        /// <remarks/>
        public void SynchRecordsTestAsync(string RegistrationKey) {
            this.SynchRecordsTestAsync(RegistrationKey, null);
        }
        
        /// <remarks/>
        public void SynchRecordsTestAsync(string RegistrationKey, object userState) {
            if ((this.SynchRecordsTestOperationCompleted == null)) {
                this.SynchRecordsTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchRecordsTestOperationCompleted);
            }
            this.InvokeAsync("SynchRecordsTest", new object[] {
                        RegistrationKey}, this.SynchRecordsTestOperationCompleted, userState);
        }
        
        private void OnSynchRecordsTestOperationCompleted(object arg) {
            if ((this.SynchRecordsTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchRecordsTestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchRecordsTestV2", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchRecordsTestV2(string RegistrationKey, Patientm patientm) {
            this.Invoke("SynchRecordsTestV2", new object[] {
                        RegistrationKey,
                        patientm});
        }
        
        /// <remarks/>
        public void SynchRecordsTestV2Async(string RegistrationKey, Patientm patientm) {
            this.SynchRecordsTestV2Async(RegistrationKey, patientm, null);
        }
        
        /// <remarks/>
        public void SynchRecordsTestV2Async(string RegistrationKey, Patientm patientm, object userState) {
            if ((this.SynchRecordsTestV2OperationCompleted == null)) {
                this.SynchRecordsTestV2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchRecordsTestV2OperationCompleted);
            }
            this.InvokeAsync("SynchRecordsTestV2", new object[] {
                        RegistrationKey,
                        patientm}, this.SynchRecordsTestV2OperationCompleted, userState);
        }
        
        private void OnSynchRecordsTestV2OperationCompleted(object arg) {
            if ((this.SynchRecordsTestV2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchRecordsTestV2Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SynchRecords", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SynchRecords(string RegistrationKey, Patientm[] patientmList) {
            this.Invoke("SynchRecords", new object[] {
                        RegistrationKey,
                        patientmList});
        }
        
        /// <remarks/>
        public void SynchRecordsAsync(string RegistrationKey, Patientm[] patientmList) {
            this.SynchRecordsAsync(RegistrationKey, patientmList, null);
        }
        
        /// <remarks/>
        public void SynchRecordsAsync(string RegistrationKey, Patientm[] patientmList, object userState) {
            if ((this.SynchRecordsOperationCompleted == null)) {
                this.SynchRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchRecordsOperationCompleted);
            }
            this.InvokeAsync("SynchRecords", new object[] {
                        RegistrationKey,
                        patientmList}, this.SynchRecordsOperationCompleted, userState);
        }
        
        private void OnSynchRecordsOperationCompleted(object arg) {
            if ((this.SynchRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchRecordsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/DeleteRecords", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteRecords(string RegistrationKey, long[] patientNums) {
            this.Invoke("DeleteRecords", new object[] {
                        RegistrationKey,
                        patientNums});
        }
        
        /// <remarks/>
        public void DeleteRecordsAsync(string RegistrationKey, long[] patientNums) {
            this.DeleteRecordsAsync(RegistrationKey, patientNums, null);
        }
        
        /// <remarks/>
        public void DeleteRecordsAsync(string RegistrationKey, long[] patientNums, object userState) {
            if ((this.DeleteRecordsOperationCompleted == null)) {
                this.DeleteRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteRecordsOperationCompleted);
            }
            this.InvokeAsync("DeleteRecords", new object[] {
                        RegistrationKey,
                        patientNums}, this.DeleteRecordsOperationCompleted, userState);
        }
        
        private void OnDeleteRecordsOperationCompleted(object arg) {
            if ((this.DeleteRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteRecordsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://opendental.com/SetMobileWebPassword", RequestNamespace="http://opendental.com/", ResponseNamespace="http://opendental.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetMobileWebPassword(string RegistrationKey, string Password) {
            this.Invoke("SetMobileWebPassword", new object[] {
                        RegistrationKey,
                        Password});
        }
        
        /// <remarks/>
        public void SetMobileWebPasswordAsync(string RegistrationKey, string Password) {
            this.SetMobileWebPasswordAsync(RegistrationKey, Password, null);
        }
        
        /// <remarks/>
        public void SetMobileWebPasswordAsync(string RegistrationKey, string Password, object userState) {
            if ((this.SetMobileWebPasswordOperationCompleted == null)) {
                this.SetMobileWebPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMobileWebPasswordOperationCompleted);
            }
            this.InvokeAsync("SetMobileWebPassword", new object[] {
                        RegistrationKey,
                        Password}, this.SetMobileWebPasswordOperationCompleted, userState);
        }
        
        private void OnSetMobileWebPasswordOperationCompleted(object arg) {
            if ((this.SetMobileWebPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetMobileWebPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ServiceExistsCompletedEventHandler(object sender, ServiceExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServiceExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ServiceExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetRecordCountCompletedEventHandler(object sender, GetRecordCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRecordCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRecordCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SynchRecordsTestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SynchRecordsTestV2CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SynchRecordsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteRecordsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetMobileWebPasswordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591