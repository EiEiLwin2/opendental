package com.opendental.odweb.client.remoting;

import com.google.gwt.xml.client.Document;
import com.google.gwt.xml.client.XMLParser;
import com.opendental.odweb.client.tabletypes.*;
import com.google.gwt.xml.client.Node;
import com.google.gwt.xml.client.NodeList;

/** Do not make changes to this file.  This class is automatically generated by the CRUD, any changes made will be overwritten.  To make changes, go to xCrudGeneratorWebService.Form1.cs and make the changes within StartJavaSerial(). */
public class Serializing {

	/** Escapes common characters used in XML. */
	public static String EscapeForXml(String myString) {
		StringBuilder strBuild=new StringBuilder();
		int length=myString.length();
		for(int i=0;i<length;i++) {
			String character=myString.substring(i,i+1);
			if(character.equals("<")) {
				strBuild.append("&lt;");
				continue;
			}
			else if(character.equals(">")) {
				strBuild.append("&gt;");
				continue;
			}
			else if(character.equals("\"")) {
				strBuild.append("&quot;");
				continue;
			}
			else if(character.equals("\'")) {
				strBuild.append("&#039;");
				continue;
			}
			else if(character.equals("&")) {
				strBuild.append("&amp;");
				continue;
			}
			strBuild.append(character);
		}
		return strBuild.toString();
	}

	/** Loops through all the known objects and calls the corresponding classes serialize method.
	 * @throws Exception Throws exception if type is not yet supported. */
	public static String GetSerializedObject(Object obj) throws Exception {
		String result;
		//Figure out what type of object we're dealing with and return the serialized form.
		String qualifiedName=obj.getClass().getName();//Ex: ArrayList = "java.util.ArrayList"
		//Primitives--------------------------------------------------------------------------------------------------------
		if(qualifiedName=="Z" || qualifiedName=="java.lang.Boolean") {//boolean  "Z"
			result=(Boolean)obj?"1":"0";
			return "<bool>"+result+"</bool>";
		}
		if(qualifiedName=="B" || qualifiedName=="java.lang.Byte") {//byte  "B"
			return "<byte>"+(Byte)obj+"</byte>";
		}
		if(qualifiedName=="C" || qualifiedName=="java.lang.Character") {//char  "C"
			return "<char>"+(Character)obj+"</char>";
		}
		if(qualifiedName=="S" || qualifiedName=="java.lang.Short") {//short  "S"
			return "<short>"+(Short)obj+"</short>";
		}
		if(qualifiedName=="I" || qualifiedName=="java.lang.Integer") {//int  "I"
			return "<int>"+(Integer)obj+"</int>";
		}
		if(qualifiedName=="J" || qualifiedName=="java.lang.Long") {//long  "J"
			//return "<long>"+(Long)obj+"</long>";
		}
		if(qualifiedName=="F" || qualifiedName=="java.lang.Float") {//float  "F"
			return "<float>"+(Float)obj+"</float>";
		}
		if(qualifiedName=="D" || qualifiedName=="java.lang.Double") {//double  "D"
			return "<double>"+(Double)obj+"</double>";
		}
		if(qualifiedName=="java.lang.String") {//String  "java.lang.String"
			return "<string>"+(String)obj+"</string>";
		}
		//Arrays------------------------------------------------------------------------------------------------------------
		//Multidimensional arrays have equal number of brackets. Ex: Account[][] = [[L...
		//Object[]  "[Lcom.opendental.odweb.client.tabletypes.Account;" from Account[]
		//int[]     "[I"
		//String[]  "[Ljava.lang.String;"
		//Open Dental Objects-----------------------------------------------------------------------------------------------
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Account") {
			return ((Account)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.AccountingAutoPay") {
			return ((AccountingAutoPay)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Adjustment") {
			return ((Adjustment)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Allergy") {
			return ((Allergy)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.AllergyDef") {
			return ((AllergyDef)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Appointment") {
			return ((Appointment)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.AppointmentRule") {
			return ((AppointmentRule)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ApptField") {
			return ((ApptField)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ApptFieldDef") {
			return ((ApptFieldDef)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ApptView") {
			return ((ApptView)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ApptViewItem") {
			return ((ApptViewItem)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.AutoCode") {
			return ((AutoCode)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.AutoCodeCond") {
			return ((AutoCodeCond)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.AutoCodeItem") {
			return ((AutoCodeItem)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Automation") {
			return ((Automation)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.AutomationCondition") {
			return ((AutomationCondition)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.AutoNote") {
			return ((AutoNote)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.AutoNoteControl") {
			return ((AutoNoteControl)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Benefit") {
			return ((Benefit)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.CanadianNetwork") {
			return ((CanadianNetwork)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Carrier") {
			return ((Carrier)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.CentralConnection") {
			return ((CentralConnection)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ChartView") {
			return ((ChartView)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Claim") {
			return ((Claim)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ClaimAttach") {
			return ((ClaimAttach)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ClaimCondCodeLog") {
			return ((ClaimCondCodeLog)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ClaimForm") {
			return ((ClaimForm)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ClaimFormItem") {
			return ((ClaimFormItem)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ClaimPayment") {
			return ((ClaimPayment)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ClaimProc") {
			return ((ClaimProc)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ClaimValCodeLog") {
			return ((ClaimValCodeLog)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Clearinghouse") {
			return ((Clearinghouse)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Clinic") {
			return ((Clinic)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ClockEvent") {
			return ((ClockEvent)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Commlog") {
			return ((Commlog)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Computer") {
			return ((Computer)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ComputerPref") {
			return ((ComputerPref)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Contact") {
			return ((Contact)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.County") {
			return ((County)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.CovCat") {
			return ((CovCat)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.CovSpan") {
			return ((CovSpan)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.CreditCard") {
			return ((CreditCard)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.CustRefEntry") {
			return ((CustRefEntry)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.CustReference") {
			return ((CustReference)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.DashboardAR") {
			return ((DashboardAR)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Def") {
			return ((Def)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.DeletedObject") {
			return ((DeletedObject)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Deposit") {
			return ((Deposit)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.DictCustom") {
			return ((DictCustom)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Disease") {
			return ((Disease)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.DiseaseDef") {
			return ((DiseaseDef)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.DisplayField") {
			return ((DisplayField)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Documentod") {
			return ((Documentod)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.DocumentMisc") {
			return ((DocumentMisc)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.DrugManufacturer") {
			return ((DrugManufacturer)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.DrugUnit") {
			return ((DrugUnit)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Dunning") {
			return ((Dunning)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.EduResource") {
			return ((EduResource)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.EhrMeasure") {
			return ((EhrMeasure)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.EhrMeasureEvent") {
			return ((EhrMeasureEvent)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.EhrProvKey") {
			return ((EhrProvKey)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.EhrQuarterlyKey") {
			return ((EhrQuarterlyKey)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.EhrSummaryCcd") {
			return ((EhrSummaryCcd)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ElectID") {
			return ((ElectID)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.EmailAttach") {
			return ((EmailAttach)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.EmailMessage") {
			return ((EmailMessage)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.EmailTemplate") {
			return ((EmailTemplate)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Employee") {
			return ((Employee)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Employer") {
			return ((Employer)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.EobAttach") {
			return ((EobAttach)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Equipment") {
			return ((Equipment)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ErxLog") {
			return ((ErxLog)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Etrans") {
			return ((Etrans)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.EtransMessageText") {
			return ((EtransMessageText)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Fee") {
			return ((Fee)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.FeeSched") {
			return ((FeeSched)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.FormPat") {
			return ((FormPat)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Formulary") {
			return ((Formulary)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.FormularyMed") {
			return ((FormularyMed)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.GroupPermission") {
			return ((GroupPermission)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Guardian") {
			return ((Guardian)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.HL7Def") {
			return ((HL7Def)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.HL7DefField") {
			return ((HL7DefField)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.HL7DefMessage") {
			return ((HL7DefMessage)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.HL7DefSegment") {
			return ((HL7DefSegment)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.HL7Msg") {
			return ((HL7Msg)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ICD9") {
			return ((ICD9)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.InsFilingCode") {
			return ((InsFilingCode)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.InsFilingCodeSubtype") {
			return ((InsFilingCodeSubtype)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.InsPlan") {
			return ((InsPlan)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.InsSub") {
			return ((InsSub)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.InstallmentPlan") {
			return ((InstallmentPlan)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.JournalEntry") {
			return ((JournalEntry)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.LabCase") {
			return ((LabCase)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Laboratory") {
			return ((Laboratory)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.LabPanel") {
			return ((LabPanel)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.LabResult") {
			return ((LabResult)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.LabTurnaround") {
			return ((LabTurnaround)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Language") {
			return ((Language)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.LanguageForeign") {
			return ((LanguageForeign)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Letter") {
			return ((Letter)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.LetterMerge") {
			return ((LetterMerge)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.LetterMergeField") {
			return ((LetterMergeField)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.MedicalOrder") {
			return ((MedicalOrder)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Medication") {
			return ((Medication)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.MedicationPat") {
			return ((MedicationPat)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Mount") {
			return ((Mount)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.MountDef") {
			return ((MountDef)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.MountItem") {
			return ((MountItem)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.MountItemDef") {
			return ((MountItemDef)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Operatory") {
			return ((Operatory)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.OrionProc") {
			return ((OrionProc)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.OrthoChart") {
			return ((OrthoChart)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.PatField") {
			return ((PatField)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.PatFieldDef") {
			return ((PatFieldDef)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Patient") {
			return ((Patient)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.PatientNote") {
			return ((PatientNote)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.PatPlan") {
			return ((PatPlan)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Payment") {
			return ((Payment)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.PayPeriod") {
			return ((PayPeriod)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.PayPlan") {
			return ((PayPlan)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.PayPlanCharge") {
			return ((PayPlanCharge)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.PaySplit") {
			return ((PaySplit)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.PerioExam") {
			return ((PerioExam)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.PerioMeasure") {
			return ((PerioMeasure)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Pharmacy") {
			return ((Pharmacy)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Phone") {
			return ((Phone)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.PhoneEmpDefault") {
			return ((PhoneEmpDefault)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.PhoneMetric") {
			return ((PhoneMetric)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.PhoneNumber") {
			return ((PhoneNumber)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.PlannedAppt") {
			return ((PlannedAppt)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Popup") {
			return ((Popup)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Pref") {
			return ((Pref)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Printer") {
			return ((Printer)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ProcApptColor") {
			return ((ProcApptColor)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ProcButton") {
			return ((ProcButton)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ProcButtonItem") {
			return ((ProcButtonItem)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ProcCodeNote") {
			return ((ProcCodeNote)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Procedure") {
			return ((Procedure)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ProcedureCode") {
			return ((ProcedureCode)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ProcGroupItem") {
			return ((ProcGroupItem)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ProcNote") {
			return ((ProcNote)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ProcTP") {
			return ((ProcTP)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Program") {
			return ((Program)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ProgramProperty") {
			return ((ProgramProperty)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Provider") {
			return ((Provider)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ProviderIdent") {
			return ((ProviderIdent)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Question") {
			return ((Question)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.QuestionDef") {
			return ((QuestionDef)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.QuickPasteCat") {
			return ((QuickPasteCat)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.QuickPasteNote") {
			return ((QuickPasteNote)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Recall") {
			return ((Recall)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.RecallTrigger") {
			return ((RecallTrigger)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.RecallType") {
			return ((RecallType)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Reconcile") {
			return ((Reconcile)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.RefAttach") {
			return ((RefAttach)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Referral") {
			return ((Referral)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.RegistrationKey") {
			return ((RegistrationKey)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ReminderRule") {
			return ((ReminderRule)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.RepeatCharge") {
			return ((RepeatCharge)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ReplicationServer") {
			return ((ReplicationServer)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ReqNeeded") {
			return ((ReqNeeded)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ReqStudent") {
			return ((ReqStudent)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.RxAlert") {
			return ((RxAlert)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.RxDef") {
			return ((RxDef)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.RxNorm") {
			return ((RxNorm)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.RxPat") {
			return ((RxPat)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Schedule") {
			return ((Schedule)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ScheduleOp") {
			return ((ScheduleOp)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.SchoolClass") {
			return ((SchoolClass)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.SchoolCourse") {
			return ((SchoolCourse)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Screen") {
			return ((Screen)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ScreenGroup") {
			return ((ScreenGroup)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ScreenPat") {
			return ((ScreenPat)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.SecurityLog") {
			return ((SecurityLog)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Sheet") {
			return ((Sheet)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.SheetDef") {
			return ((SheetDef)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.SheetField") {
			return ((SheetField)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.SheetFieldDef") {
			return ((SheetFieldDef)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.SigButDef") {
			return ((SigButDef)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.SigButDefElement") {
			return ((SigButDefElement)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.SigElement") {
			return ((SigElement)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.SigElementDef") {
			return ((SigElementDef)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Signalod") {
			return ((Signalod)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Site") {
			return ((Site)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Statement") {
			return ((Statement)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Supplier") {
			return ((Supplier)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Supply") {
			return ((Supply)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.SupplyNeeded") {
			return ((SupplyNeeded)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.SupplyOrder") {
			return ((SupplyOrder)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.SupplyOrderItem") {
			return ((SupplyOrderItem)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Task") {
			return ((Task)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.TaskAncestor") {
			return ((TaskAncestor)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.TaskList") {
			return ((TaskList)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.TaskNote") {
			return ((TaskNote)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.TaskSubscription") {
			return ((TaskSubscription)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.TaskUnread") {
			return ((TaskUnread)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.TerminalActive") {
			return ((TerminalActive)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.TimeAdjust") {
			return ((TimeAdjust)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.TimeCardRule") {
			return ((TimeCardRule)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ToolButItem") {
			return ((ToolButItem)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ToothGridCell") {
			return ((ToothGridCell)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ToothGridCol") {
			return ((ToothGridCol)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ToothGridDef") {
			return ((ToothGridDef)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ToothInitial") {
			return ((ToothInitial)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Transaction") {
			return ((Transaction)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.TreatPlan") {
			return ((TreatPlan)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.UserGroup") {
			return ((UserGroup)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Userod") {
			return ((Userod)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.UserQuery") {
			return ((UserQuery)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.VaccineDef") {
			return ((VaccineDef)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.VaccinePat") {
			return ((VaccinePat)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.Vitalsign") {
			return ((Vitalsign)obj).SerializeToXml();
		}
		if(qualifiedName=="com.opendental.odweb.client.tabletypes.ZipCode") {
			return ((ZipCode)obj).SerializeToXml();
		}
		throw new Exception("GetSerializedObject, unsupported type: "+qualifiedName);
	}

	/** Loops through all the known objects and calls the corresponding classes deserialize method.
	 * @throws Exception Throws exception if type is not yet supported or if a DtoException was returned. */
	public static Object GetDeserializedObject(String xml) throws Exception {
		Document doc=XMLParser.parse(xml);
		String type="";// TODO Figure out the response type.  Response examples: <long>4</long> OR <DtoException><msg>Error</msg></DtoException>
		if(type=="DtoException") {//Check for exceptions first.
			//Read the "msg" node and throw an exception with that error message.
			throw new Exception(doc.getElementsByTagName("msg").item(0).getFirstChild().getNodeValue());
		}
		//Primitives-------------------------------------------------------------------------------------------------------
		if(type=="boolean") {

		}
		if(type=="byte") {

		}
		if(type=="char") {

		}
		if(type=="short") {

		}
		if(type=="int") {

		}
		if(type=="long") {

		}
		if(type=="float") {

		}
		if(type=="double") {

		}
		if(type=="String") {

		}
		if(type=="DataT") {
			return DeserializeDataTable(xml);
		}
		if(type.startsWith("List&lt;")) {
			return DeserializeList(xml);
		}
		//Open Dental object-------------------------------------------------------------------------------------------------
		Object result=DeserializeOpenDentalObject(type,xml);
		if(result!=null) {
			return result;
		}
		throw new Exception("GetDeserializedObject, unsupported type: "+type);
	}

	/** Pass in the type and just the xml for that object.  Returns null if no match found. */
	private static Object DeserializeOpenDentalObject(String type,String xml) throws Exception {
		if(type=="Account") {
			Account account=new Account();
			account.DeserializeFromXml(xml);
			return account;
		}
		if(type=="AccountingAutoPay") {
			AccountingAutoPay accountingautopay=new AccountingAutoPay();
			accountingautopay.DeserializeFromXml(xml);
			return accountingautopay;
		}
		if(type=="Adjustment") {
			Adjustment adjustment=new Adjustment();
			adjustment.DeserializeFromXml(xml);
			return adjustment;
		}
		if(type=="Allergy") {
			Allergy allergy=new Allergy();
			allergy.DeserializeFromXml(xml);
			return allergy;
		}
		if(type=="AllergyDef") {
			AllergyDef allergydef=new AllergyDef();
			allergydef.DeserializeFromXml(xml);
			return allergydef;
		}
		if(type=="Appointment") {
			Appointment appointment=new Appointment();
			appointment.DeserializeFromXml(xml);
			return appointment;
		}
		if(type=="AppointmentRule") {
			AppointmentRule appointmentrule=new AppointmentRule();
			appointmentrule.DeserializeFromXml(xml);
			return appointmentrule;
		}
		if(type=="ApptField") {
			ApptField apptfield=new ApptField();
			apptfield.DeserializeFromXml(xml);
			return apptfield;
		}
		if(type=="ApptFieldDef") {
			ApptFieldDef apptfielddef=new ApptFieldDef();
			apptfielddef.DeserializeFromXml(xml);
			return apptfielddef;
		}
		if(type=="ApptView") {
			ApptView apptview=new ApptView();
			apptview.DeserializeFromXml(xml);
			return apptview;
		}
		if(type=="ApptViewItem") {
			ApptViewItem apptviewitem=new ApptViewItem();
			apptviewitem.DeserializeFromXml(xml);
			return apptviewitem;
		}
		if(type=="AutoCode") {
			AutoCode autocode=new AutoCode();
			autocode.DeserializeFromXml(xml);
			return autocode;
		}
		if(type=="AutoCodeCond") {
			AutoCodeCond autocodecond=new AutoCodeCond();
			autocodecond.DeserializeFromXml(xml);
			return autocodecond;
		}
		if(type=="AutoCodeItem") {
			AutoCodeItem autocodeitem=new AutoCodeItem();
			autocodeitem.DeserializeFromXml(xml);
			return autocodeitem;
		}
		if(type=="Automation") {
			Automation automation=new Automation();
			automation.DeserializeFromXml(xml);
			return automation;
		}
		if(type=="AutomationCondition") {
			AutomationCondition automationcondition=new AutomationCondition();
			automationcondition.DeserializeFromXml(xml);
			return automationcondition;
		}
		if(type=="AutoNote") {
			AutoNote autonote=new AutoNote();
			autonote.DeserializeFromXml(xml);
			return autonote;
		}
		if(type=="AutoNoteControl") {
			AutoNoteControl autonotecontrol=new AutoNoteControl();
			autonotecontrol.DeserializeFromXml(xml);
			return autonotecontrol;
		}
		if(type=="Benefit") {
			Benefit benefit=new Benefit();
			benefit.DeserializeFromXml(xml);
			return benefit;
		}
		if(type=="CanadianNetwork") {
			CanadianNetwork canadiannetwork=new CanadianNetwork();
			canadiannetwork.DeserializeFromXml(xml);
			return canadiannetwork;
		}
		if(type=="Carrier") {
			Carrier carrier=new Carrier();
			carrier.DeserializeFromXml(xml);
			return carrier;
		}
		if(type=="CentralConnection") {
			CentralConnection centralconnection=new CentralConnection();
			centralconnection.DeserializeFromXml(xml);
			return centralconnection;
		}
		if(type=="ChartView") {
			ChartView chartview=new ChartView();
			chartview.DeserializeFromXml(xml);
			return chartview;
		}
		if(type=="Claim") {
			Claim claim=new Claim();
			claim.DeserializeFromXml(xml);
			return claim;
		}
		if(type=="ClaimAttach") {
			ClaimAttach claimattach=new ClaimAttach();
			claimattach.DeserializeFromXml(xml);
			return claimattach;
		}
		if(type=="ClaimCondCodeLog") {
			ClaimCondCodeLog claimcondcodelog=new ClaimCondCodeLog();
			claimcondcodelog.DeserializeFromXml(xml);
			return claimcondcodelog;
		}
		if(type=="ClaimForm") {
			ClaimForm claimform=new ClaimForm();
			claimform.DeserializeFromXml(xml);
			return claimform;
		}
		if(type=="ClaimFormItem") {
			ClaimFormItem claimformitem=new ClaimFormItem();
			claimformitem.DeserializeFromXml(xml);
			return claimformitem;
		}
		if(type=="ClaimPayment") {
			ClaimPayment claimpayment=new ClaimPayment();
			claimpayment.DeserializeFromXml(xml);
			return claimpayment;
		}
		if(type=="ClaimProc") {
			ClaimProc claimproc=new ClaimProc();
			claimproc.DeserializeFromXml(xml);
			return claimproc;
		}
		if(type=="ClaimValCodeLog") {
			ClaimValCodeLog claimvalcodelog=new ClaimValCodeLog();
			claimvalcodelog.DeserializeFromXml(xml);
			return claimvalcodelog;
		}
		if(type=="Clearinghouse") {
			Clearinghouse clearinghouse=new Clearinghouse();
			clearinghouse.DeserializeFromXml(xml);
			return clearinghouse;
		}
		if(type=="Clinic") {
			Clinic clinic=new Clinic();
			clinic.DeserializeFromXml(xml);
			return clinic;
		}
		if(type=="ClockEvent") {
			ClockEvent clockevent=new ClockEvent();
			clockevent.DeserializeFromXml(xml);
			return clockevent;
		}
		if(type=="Commlog") {
			Commlog commlog=new Commlog();
			commlog.DeserializeFromXml(xml);
			return commlog;
		}
		if(type=="Computer") {
			Computer computer=new Computer();
			computer.DeserializeFromXml(xml);
			return computer;
		}
		if(type=="ComputerPref") {
			ComputerPref computerpref=new ComputerPref();
			computerpref.DeserializeFromXml(xml);
			return computerpref;
		}
		if(type=="Contact") {
			Contact contact=new Contact();
			contact.DeserializeFromXml(xml);
			return contact;
		}
		if(type=="County") {
			County county=new County();
			county.DeserializeFromXml(xml);
			return county;
		}
		if(type=="CovCat") {
			CovCat covcat=new CovCat();
			covcat.DeserializeFromXml(xml);
			return covcat;
		}
		if(type=="CovSpan") {
			CovSpan covspan=new CovSpan();
			covspan.DeserializeFromXml(xml);
			return covspan;
		}
		if(type=="CreditCard") {
			CreditCard creditcard=new CreditCard();
			creditcard.DeserializeFromXml(xml);
			return creditcard;
		}
		if(type=="CustRefEntry") {
			CustRefEntry custrefentry=new CustRefEntry();
			custrefentry.DeserializeFromXml(xml);
			return custrefentry;
		}
		if(type=="CustReference") {
			CustReference custreference=new CustReference();
			custreference.DeserializeFromXml(xml);
			return custreference;
		}
		if(type=="DashboardAR") {
			DashboardAR dashboardar=new DashboardAR();
			dashboardar.DeserializeFromXml(xml);
			return dashboardar;
		}
		if(type=="Def") {
			Def def=new Def();
			def.DeserializeFromXml(xml);
			return def;
		}
		if(type=="DeletedObject") {
			DeletedObject deletedobject=new DeletedObject();
			deletedobject.DeserializeFromXml(xml);
			return deletedobject;
		}
		if(type=="Deposit") {
			Deposit deposit=new Deposit();
			deposit.DeserializeFromXml(xml);
			return deposit;
		}
		if(type=="DictCustom") {
			DictCustom dictcustom=new DictCustom();
			dictcustom.DeserializeFromXml(xml);
			return dictcustom;
		}
		if(type=="Disease") {
			Disease disease=new Disease();
			disease.DeserializeFromXml(xml);
			return disease;
		}
		if(type=="DiseaseDef") {
			DiseaseDef diseasedef=new DiseaseDef();
			diseasedef.DeserializeFromXml(xml);
			return diseasedef;
		}
		if(type=="DisplayField") {
			DisplayField displayfield=new DisplayField();
			displayfield.DeserializeFromXml(xml);
			return displayfield;
		}
		if(type=="Documentod") {
			Documentod documentod=new Documentod();
			documentod.DeserializeFromXml(xml);
			return documentod;
		}
		if(type=="DocumentMisc") {
			DocumentMisc documentmisc=new DocumentMisc();
			documentmisc.DeserializeFromXml(xml);
			return documentmisc;
		}
		if(type=="DrugManufacturer") {
			DrugManufacturer drugmanufacturer=new DrugManufacturer();
			drugmanufacturer.DeserializeFromXml(xml);
			return drugmanufacturer;
		}
		if(type=="DrugUnit") {
			DrugUnit drugunit=new DrugUnit();
			drugunit.DeserializeFromXml(xml);
			return drugunit;
		}
		if(type=="Dunning") {
			Dunning dunning=new Dunning();
			dunning.DeserializeFromXml(xml);
			return dunning;
		}
		if(type=="EduResource") {
			EduResource eduresource=new EduResource();
			eduresource.DeserializeFromXml(xml);
			return eduresource;
		}
		if(type=="EhrMeasure") {
			EhrMeasure ehrmeasure=new EhrMeasure();
			ehrmeasure.DeserializeFromXml(xml);
			return ehrmeasure;
		}
		if(type=="EhrMeasureEvent") {
			EhrMeasureEvent ehrmeasureevent=new EhrMeasureEvent();
			ehrmeasureevent.DeserializeFromXml(xml);
			return ehrmeasureevent;
		}
		if(type=="EhrProvKey") {
			EhrProvKey ehrprovkey=new EhrProvKey();
			ehrprovkey.DeserializeFromXml(xml);
			return ehrprovkey;
		}
		if(type=="EhrQuarterlyKey") {
			EhrQuarterlyKey ehrquarterlykey=new EhrQuarterlyKey();
			ehrquarterlykey.DeserializeFromXml(xml);
			return ehrquarterlykey;
		}
		if(type=="EhrSummaryCcd") {
			EhrSummaryCcd ehrsummaryccd=new EhrSummaryCcd();
			ehrsummaryccd.DeserializeFromXml(xml);
			return ehrsummaryccd;
		}
		if(type=="ElectID") {
			ElectID electid=new ElectID();
			electid.DeserializeFromXml(xml);
			return electid;
		}
		if(type=="EmailAttach") {
			EmailAttach emailattach=new EmailAttach();
			emailattach.DeserializeFromXml(xml);
			return emailattach;
		}
		if(type=="EmailMessage") {
			EmailMessage emailmessage=new EmailMessage();
			emailmessage.DeserializeFromXml(xml);
			return emailmessage;
		}
		if(type=="EmailTemplate") {
			EmailTemplate emailtemplate=new EmailTemplate();
			emailtemplate.DeserializeFromXml(xml);
			return emailtemplate;
		}
		if(type=="Employee") {
			Employee employee=new Employee();
			employee.DeserializeFromXml(xml);
			return employee;
		}
		if(type=="Employer") {
			Employer employer=new Employer();
			employer.DeserializeFromXml(xml);
			return employer;
		}
		if(type=="EobAttach") {
			EobAttach eobattach=new EobAttach();
			eobattach.DeserializeFromXml(xml);
			return eobattach;
		}
		if(type=="Equipment") {
			Equipment equipment=new Equipment();
			equipment.DeserializeFromXml(xml);
			return equipment;
		}
		if(type=="ErxLog") {
			ErxLog erxlog=new ErxLog();
			erxlog.DeserializeFromXml(xml);
			return erxlog;
		}
		if(type=="Etrans") {
			Etrans etrans=new Etrans();
			etrans.DeserializeFromXml(xml);
			return etrans;
		}
		if(type=="EtransMessageText") {
			EtransMessageText etransmessagetext=new EtransMessageText();
			etransmessagetext.DeserializeFromXml(xml);
			return etransmessagetext;
		}
		if(type=="Fee") {
			Fee fee=new Fee();
			fee.DeserializeFromXml(xml);
			return fee;
		}
		if(type=="FeeSched") {
			FeeSched feesched=new FeeSched();
			feesched.DeserializeFromXml(xml);
			return feesched;
		}
		if(type=="FormPat") {
			FormPat formpat=new FormPat();
			formpat.DeserializeFromXml(xml);
			return formpat;
		}
		if(type=="Formulary") {
			Formulary formulary=new Formulary();
			formulary.DeserializeFromXml(xml);
			return formulary;
		}
		if(type=="FormularyMed") {
			FormularyMed formularymed=new FormularyMed();
			formularymed.DeserializeFromXml(xml);
			return formularymed;
		}
		if(type=="GroupPermission") {
			GroupPermission grouppermission=new GroupPermission();
			grouppermission.DeserializeFromXml(xml);
			return grouppermission;
		}
		if(type=="Guardian") {
			Guardian guardian=new Guardian();
			guardian.DeserializeFromXml(xml);
			return guardian;
		}
		if(type=="HL7Def") {
			HL7Def hl7def=new HL7Def();
			hl7def.DeserializeFromXml(xml);
			return hl7def;
		}
		if(type=="HL7DefField") {
			HL7DefField hl7deffield=new HL7DefField();
			hl7deffield.DeserializeFromXml(xml);
			return hl7deffield;
		}
		if(type=="HL7DefMessage") {
			HL7DefMessage hl7defmessage=new HL7DefMessage();
			hl7defmessage.DeserializeFromXml(xml);
			return hl7defmessage;
		}
		if(type=="HL7DefSegment") {
			HL7DefSegment hl7defsegment=new HL7DefSegment();
			hl7defsegment.DeserializeFromXml(xml);
			return hl7defsegment;
		}
		if(type=="HL7Msg") {
			HL7Msg hl7msg=new HL7Msg();
			hl7msg.DeserializeFromXml(xml);
			return hl7msg;
		}
		if(type=="ICD9") {
			ICD9 icd9=new ICD9();
			icd9.DeserializeFromXml(xml);
			return icd9;
		}
		if(type=="InsFilingCode") {
			InsFilingCode insfilingcode=new InsFilingCode();
			insfilingcode.DeserializeFromXml(xml);
			return insfilingcode;
		}
		if(type=="InsFilingCodeSubtype") {
			InsFilingCodeSubtype insfilingcodesubtype=new InsFilingCodeSubtype();
			insfilingcodesubtype.DeserializeFromXml(xml);
			return insfilingcodesubtype;
		}
		if(type=="InsPlan") {
			InsPlan insplan=new InsPlan();
			insplan.DeserializeFromXml(xml);
			return insplan;
		}
		if(type=="InsSub") {
			InsSub inssub=new InsSub();
			inssub.DeserializeFromXml(xml);
			return inssub;
		}
		if(type=="InstallmentPlan") {
			InstallmentPlan installmentplan=new InstallmentPlan();
			installmentplan.DeserializeFromXml(xml);
			return installmentplan;
		}
		if(type=="JournalEntry") {
			JournalEntry journalentry=new JournalEntry();
			journalentry.DeserializeFromXml(xml);
			return journalentry;
		}
		if(type=="LabCase") {
			LabCase labcase=new LabCase();
			labcase.DeserializeFromXml(xml);
			return labcase;
		}
		if(type=="Laboratory") {
			Laboratory laboratory=new Laboratory();
			laboratory.DeserializeFromXml(xml);
			return laboratory;
		}
		if(type=="LabPanel") {
			LabPanel labpanel=new LabPanel();
			labpanel.DeserializeFromXml(xml);
			return labpanel;
		}
		if(type=="LabResult") {
			LabResult labresult=new LabResult();
			labresult.DeserializeFromXml(xml);
			return labresult;
		}
		if(type=="LabTurnaround") {
			LabTurnaround labturnaround=new LabTurnaround();
			labturnaround.DeserializeFromXml(xml);
			return labturnaround;
		}
		if(type=="Language") {
			Language language=new Language();
			language.DeserializeFromXml(xml);
			return language;
		}
		if(type=="LanguageForeign") {
			LanguageForeign languageforeign=new LanguageForeign();
			languageforeign.DeserializeFromXml(xml);
			return languageforeign;
		}
		if(type=="Letter") {
			Letter letter=new Letter();
			letter.DeserializeFromXml(xml);
			return letter;
		}
		if(type=="LetterMerge") {
			LetterMerge lettermerge=new LetterMerge();
			lettermerge.DeserializeFromXml(xml);
			return lettermerge;
		}
		if(type=="LetterMergeField") {
			LetterMergeField lettermergefield=new LetterMergeField();
			lettermergefield.DeserializeFromXml(xml);
			return lettermergefield;
		}
		if(type=="MedicalOrder") {
			MedicalOrder medicalorder=new MedicalOrder();
			medicalorder.DeserializeFromXml(xml);
			return medicalorder;
		}
		if(type=="Medication") {
			Medication medication=new Medication();
			medication.DeserializeFromXml(xml);
			return medication;
		}
		if(type=="MedicationPat") {
			MedicationPat medicationpat=new MedicationPat();
			medicationpat.DeserializeFromXml(xml);
			return medicationpat;
		}
		if(type=="Mount") {
			Mount mount=new Mount();
			mount.DeserializeFromXml(xml);
			return mount;
		}
		if(type=="MountDef") {
			MountDef mountdef=new MountDef();
			mountdef.DeserializeFromXml(xml);
			return mountdef;
		}
		if(type=="MountItem") {
			MountItem mountitem=new MountItem();
			mountitem.DeserializeFromXml(xml);
			return mountitem;
		}
		if(type=="MountItemDef") {
			MountItemDef mountitemdef=new MountItemDef();
			mountitemdef.DeserializeFromXml(xml);
			return mountitemdef;
		}
		if(type=="Operatory") {
			Operatory operatory=new Operatory();
			operatory.DeserializeFromXml(xml);
			return operatory;
		}
		if(type=="OrionProc") {
			OrionProc orionproc=new OrionProc();
			orionproc.DeserializeFromXml(xml);
			return orionproc;
		}
		if(type=="OrthoChart") {
			OrthoChart orthochart=new OrthoChart();
			orthochart.DeserializeFromXml(xml);
			return orthochart;
		}
		if(type=="PatField") {
			PatField patfield=new PatField();
			patfield.DeserializeFromXml(xml);
			return patfield;
		}
		if(type=="PatFieldDef") {
			PatFieldDef patfielddef=new PatFieldDef();
			patfielddef.DeserializeFromXml(xml);
			return patfielddef;
		}
		if(type=="Patient") {
			Patient patient=new Patient();
			patient.DeserializeFromXml(xml);
			return patient;
		}
		if(type=="PatientNote") {
			PatientNote patientnote=new PatientNote();
			patientnote.DeserializeFromXml(xml);
			return patientnote;
		}
		if(type=="PatPlan") {
			PatPlan patplan=new PatPlan();
			patplan.DeserializeFromXml(xml);
			return patplan;
		}
		if(type=="Payment") {
			Payment payment=new Payment();
			payment.DeserializeFromXml(xml);
			return payment;
		}
		if(type=="PayPeriod") {
			PayPeriod payperiod=new PayPeriod();
			payperiod.DeserializeFromXml(xml);
			return payperiod;
		}
		if(type=="PayPlan") {
			PayPlan payplan=new PayPlan();
			payplan.DeserializeFromXml(xml);
			return payplan;
		}
		if(type=="PayPlanCharge") {
			PayPlanCharge payplancharge=new PayPlanCharge();
			payplancharge.DeserializeFromXml(xml);
			return payplancharge;
		}
		if(type=="PaySplit") {
			PaySplit paysplit=new PaySplit();
			paysplit.DeserializeFromXml(xml);
			return paysplit;
		}
		if(type=="PerioExam") {
			PerioExam perioexam=new PerioExam();
			perioexam.DeserializeFromXml(xml);
			return perioexam;
		}
		if(type=="PerioMeasure") {
			PerioMeasure periomeasure=new PerioMeasure();
			periomeasure.DeserializeFromXml(xml);
			return periomeasure;
		}
		if(type=="Pharmacy") {
			Pharmacy pharmacy=new Pharmacy();
			pharmacy.DeserializeFromXml(xml);
			return pharmacy;
		}
		if(type=="Phone") {
			Phone phone=new Phone();
			phone.DeserializeFromXml(xml);
			return phone;
		}
		if(type=="PhoneEmpDefault") {
			PhoneEmpDefault phoneempdefault=new PhoneEmpDefault();
			phoneempdefault.DeserializeFromXml(xml);
			return phoneempdefault;
		}
		if(type=="PhoneMetric") {
			PhoneMetric phonemetric=new PhoneMetric();
			phonemetric.DeserializeFromXml(xml);
			return phonemetric;
		}
		if(type=="PhoneNumber") {
			PhoneNumber phonenumber=new PhoneNumber();
			phonenumber.DeserializeFromXml(xml);
			return phonenumber;
		}
		if(type=="PlannedAppt") {
			PlannedAppt plannedappt=new PlannedAppt();
			plannedappt.DeserializeFromXml(xml);
			return plannedappt;
		}
		if(type=="Popup") {
			Popup popup=new Popup();
			popup.DeserializeFromXml(xml);
			return popup;
		}
		if(type=="Pref") {
			Pref pref=new Pref();
			pref.DeserializeFromXml(xml);
			return pref;
		}
		if(type=="Printer") {
			Printer printer=new Printer();
			printer.DeserializeFromXml(xml);
			return printer;
		}
		if(type=="ProcApptColor") {
			ProcApptColor procapptcolor=new ProcApptColor();
			procapptcolor.DeserializeFromXml(xml);
			return procapptcolor;
		}
		if(type=="ProcButton") {
			ProcButton procbutton=new ProcButton();
			procbutton.DeserializeFromXml(xml);
			return procbutton;
		}
		if(type=="ProcButtonItem") {
			ProcButtonItem procbuttonitem=new ProcButtonItem();
			procbuttonitem.DeserializeFromXml(xml);
			return procbuttonitem;
		}
		if(type=="ProcCodeNote") {
			ProcCodeNote proccodenote=new ProcCodeNote();
			proccodenote.DeserializeFromXml(xml);
			return proccodenote;
		}
		if(type=="Procedure") {
			Procedure procedure=new Procedure();
			procedure.DeserializeFromXml(xml);
			return procedure;
		}
		if(type=="ProcedureCode") {
			ProcedureCode procedurecode=new ProcedureCode();
			procedurecode.DeserializeFromXml(xml);
			return procedurecode;
		}
		if(type=="ProcGroupItem") {
			ProcGroupItem procgroupitem=new ProcGroupItem();
			procgroupitem.DeserializeFromXml(xml);
			return procgroupitem;
		}
		if(type=="ProcNote") {
			ProcNote procnote=new ProcNote();
			procnote.DeserializeFromXml(xml);
			return procnote;
		}
		if(type=="ProcTP") {
			ProcTP proctp=new ProcTP();
			proctp.DeserializeFromXml(xml);
			return proctp;
		}
		if(type=="Program") {
			Program program=new Program();
			program.DeserializeFromXml(xml);
			return program;
		}
		if(type=="ProgramProperty") {
			ProgramProperty programproperty=new ProgramProperty();
			programproperty.DeserializeFromXml(xml);
			return programproperty;
		}
		if(type=="Provider") {
			Provider provider=new Provider();
			provider.DeserializeFromXml(xml);
			return provider;
		}
		if(type=="ProviderIdent") {
			ProviderIdent providerident=new ProviderIdent();
			providerident.DeserializeFromXml(xml);
			return providerident;
		}
		if(type=="Question") {
			Question question=new Question();
			question.DeserializeFromXml(xml);
			return question;
		}
		if(type=="QuestionDef") {
			QuestionDef questiondef=new QuestionDef();
			questiondef.DeserializeFromXml(xml);
			return questiondef;
		}
		if(type=="QuickPasteCat") {
			QuickPasteCat quickpastecat=new QuickPasteCat();
			quickpastecat.DeserializeFromXml(xml);
			return quickpastecat;
		}
		if(type=="QuickPasteNote") {
			QuickPasteNote quickpastenote=new QuickPasteNote();
			quickpastenote.DeserializeFromXml(xml);
			return quickpastenote;
		}
		if(type=="Recall") {
			Recall recall=new Recall();
			recall.DeserializeFromXml(xml);
			return recall;
		}
		if(type=="RecallTrigger") {
			RecallTrigger recalltrigger=new RecallTrigger();
			recalltrigger.DeserializeFromXml(xml);
			return recalltrigger;
		}
		if(type=="RecallType") {
			RecallType recalltype=new RecallType();
			recalltype.DeserializeFromXml(xml);
			return recalltype;
		}
		if(type=="Reconcile") {
			Reconcile reconcile=new Reconcile();
			reconcile.DeserializeFromXml(xml);
			return reconcile;
		}
		if(type=="RefAttach") {
			RefAttach refattach=new RefAttach();
			refattach.DeserializeFromXml(xml);
			return refattach;
		}
		if(type=="Referral") {
			Referral referral=new Referral();
			referral.DeserializeFromXml(xml);
			return referral;
		}
		if(type=="RegistrationKey") {
			RegistrationKey registrationkey=new RegistrationKey();
			registrationkey.DeserializeFromXml(xml);
			return registrationkey;
		}
		if(type=="ReminderRule") {
			ReminderRule reminderrule=new ReminderRule();
			reminderrule.DeserializeFromXml(xml);
			return reminderrule;
		}
		if(type=="RepeatCharge") {
			RepeatCharge repeatcharge=new RepeatCharge();
			repeatcharge.DeserializeFromXml(xml);
			return repeatcharge;
		}
		if(type=="ReplicationServer") {
			ReplicationServer replicationserver=new ReplicationServer();
			replicationserver.DeserializeFromXml(xml);
			return replicationserver;
		}
		if(type=="ReqNeeded") {
			ReqNeeded reqneeded=new ReqNeeded();
			reqneeded.DeserializeFromXml(xml);
			return reqneeded;
		}
		if(type=="ReqStudent") {
			ReqStudent reqstudent=new ReqStudent();
			reqstudent.DeserializeFromXml(xml);
			return reqstudent;
		}
		if(type=="RxAlert") {
			RxAlert rxalert=new RxAlert();
			rxalert.DeserializeFromXml(xml);
			return rxalert;
		}
		if(type=="RxDef") {
			RxDef rxdef=new RxDef();
			rxdef.DeserializeFromXml(xml);
			return rxdef;
		}
		if(type=="RxNorm") {
			RxNorm rxnorm=new RxNorm();
			rxnorm.DeserializeFromXml(xml);
			return rxnorm;
		}
		if(type=="RxPat") {
			RxPat rxpat=new RxPat();
			rxpat.DeserializeFromXml(xml);
			return rxpat;
		}
		if(type=="Schedule") {
			Schedule schedule=new Schedule();
			schedule.DeserializeFromXml(xml);
			return schedule;
		}
		if(type=="ScheduleOp") {
			ScheduleOp scheduleop=new ScheduleOp();
			scheduleop.DeserializeFromXml(xml);
			return scheduleop;
		}
		if(type=="SchoolClass") {
			SchoolClass schoolclass=new SchoolClass();
			schoolclass.DeserializeFromXml(xml);
			return schoolclass;
		}
		if(type=="SchoolCourse") {
			SchoolCourse schoolcourse=new SchoolCourse();
			schoolcourse.DeserializeFromXml(xml);
			return schoolcourse;
		}
		if(type=="Screen") {
			Screen screen=new Screen();
			screen.DeserializeFromXml(xml);
			return screen;
		}
		if(type=="ScreenGroup") {
			ScreenGroup screengroup=new ScreenGroup();
			screengroup.DeserializeFromXml(xml);
			return screengroup;
		}
		if(type=="ScreenPat") {
			ScreenPat screenpat=new ScreenPat();
			screenpat.DeserializeFromXml(xml);
			return screenpat;
		}
		if(type=="SecurityLog") {
			SecurityLog securitylog=new SecurityLog();
			securitylog.DeserializeFromXml(xml);
			return securitylog;
		}
		if(type=="Sheet") {
			Sheet sheet=new Sheet();
			sheet.DeserializeFromXml(xml);
			return sheet;
		}
		if(type=="SheetDef") {
			SheetDef sheetdef=new SheetDef();
			sheetdef.DeserializeFromXml(xml);
			return sheetdef;
		}
		if(type=="SheetField") {
			SheetField sheetfield=new SheetField();
			sheetfield.DeserializeFromXml(xml);
			return sheetfield;
		}
		if(type=="SheetFieldDef") {
			SheetFieldDef sheetfielddef=new SheetFieldDef();
			sheetfielddef.DeserializeFromXml(xml);
			return sheetfielddef;
		}
		if(type=="SigButDef") {
			SigButDef sigbutdef=new SigButDef();
			sigbutdef.DeserializeFromXml(xml);
			return sigbutdef;
		}
		if(type=="SigButDefElement") {
			SigButDefElement sigbutdefelement=new SigButDefElement();
			sigbutdefelement.DeserializeFromXml(xml);
			return sigbutdefelement;
		}
		if(type=="SigElement") {
			SigElement sigelement=new SigElement();
			sigelement.DeserializeFromXml(xml);
			return sigelement;
		}
		if(type=="SigElementDef") {
			SigElementDef sigelementdef=new SigElementDef();
			sigelementdef.DeserializeFromXml(xml);
			return sigelementdef;
		}
		if(type=="Signalod") {
			Signalod signalod=new Signalod();
			signalod.DeserializeFromXml(xml);
			return signalod;
		}
		if(type=="Site") {
			Site site=new Site();
			site.DeserializeFromXml(xml);
			return site;
		}
		if(type=="Statement") {
			Statement statement=new Statement();
			statement.DeserializeFromXml(xml);
			return statement;
		}
		if(type=="Supplier") {
			Supplier supplier=new Supplier();
			supplier.DeserializeFromXml(xml);
			return supplier;
		}
		if(type=="Supply") {
			Supply supply=new Supply();
			supply.DeserializeFromXml(xml);
			return supply;
		}
		if(type=="SupplyNeeded") {
			SupplyNeeded supplyneeded=new SupplyNeeded();
			supplyneeded.DeserializeFromXml(xml);
			return supplyneeded;
		}
		if(type=="SupplyOrder") {
			SupplyOrder supplyorder=new SupplyOrder();
			supplyorder.DeserializeFromXml(xml);
			return supplyorder;
		}
		if(type=="SupplyOrderItem") {
			SupplyOrderItem supplyorderitem=new SupplyOrderItem();
			supplyorderitem.DeserializeFromXml(xml);
			return supplyorderitem;
		}
		if(type=="Task") {
			Task task=new Task();
			task.DeserializeFromXml(xml);
			return task;
		}
		if(type=="TaskAncestor") {
			TaskAncestor taskancestor=new TaskAncestor();
			taskancestor.DeserializeFromXml(xml);
			return taskancestor;
		}
		if(type=="TaskList") {
			TaskList tasklist=new TaskList();
			tasklist.DeserializeFromXml(xml);
			return tasklist;
		}
		if(type=="TaskNote") {
			TaskNote tasknote=new TaskNote();
			tasknote.DeserializeFromXml(xml);
			return tasknote;
		}
		if(type=="TaskSubscription") {
			TaskSubscription tasksubscription=new TaskSubscription();
			tasksubscription.DeserializeFromXml(xml);
			return tasksubscription;
		}
		if(type=="TaskUnread") {
			TaskUnread taskunread=new TaskUnread();
			taskunread.DeserializeFromXml(xml);
			return taskunread;
		}
		if(type=="TerminalActive") {
			TerminalActive terminalactive=new TerminalActive();
			terminalactive.DeserializeFromXml(xml);
			return terminalactive;
		}
		if(type=="TimeAdjust") {
			TimeAdjust timeadjust=new TimeAdjust();
			timeadjust.DeserializeFromXml(xml);
			return timeadjust;
		}
		if(type=="TimeCardRule") {
			TimeCardRule timecardrule=new TimeCardRule();
			timecardrule.DeserializeFromXml(xml);
			return timecardrule;
		}
		if(type=="ToolButItem") {
			ToolButItem toolbutitem=new ToolButItem();
			toolbutitem.DeserializeFromXml(xml);
			return toolbutitem;
		}
		if(type=="ToothGridCell") {
			ToothGridCell toothgridcell=new ToothGridCell();
			toothgridcell.DeserializeFromXml(xml);
			return toothgridcell;
		}
		if(type=="ToothGridCol") {
			ToothGridCol toothgridcol=new ToothGridCol();
			toothgridcol.DeserializeFromXml(xml);
			return toothgridcol;
		}
		if(type=="ToothGridDef") {
			ToothGridDef toothgriddef=new ToothGridDef();
			toothgriddef.DeserializeFromXml(xml);
			return toothgriddef;
		}
		if(type=="ToothInitial") {
			ToothInitial toothinitial=new ToothInitial();
			toothinitial.DeserializeFromXml(xml);
			return toothinitial;
		}
		if(type=="Transaction") {
			Transaction transaction=new Transaction();
			transaction.DeserializeFromXml(xml);
			return transaction;
		}
		if(type=="TreatPlan") {
			TreatPlan treatplan=new TreatPlan();
			treatplan.DeserializeFromXml(xml);
			return treatplan;
		}
		if(type=="UserGroup") {
			UserGroup usergroup=new UserGroup();
			usergroup.DeserializeFromXml(xml);
			return usergroup;
		}
		if(type=="Userod") {
			Userod userod=new Userod();
			userod.DeserializeFromXml(xml);
			return userod;
		}
		if(type=="UserQuery") {
			UserQuery userquery=new UserQuery();
			userquery.DeserializeFromXml(xml);
			return userquery;
		}
		if(type=="VaccineDef") {
			VaccineDef vaccinedef=new VaccineDef();
			vaccinedef.DeserializeFromXml(xml);
			return vaccinedef;
		}
		if(type=="VaccinePat") {
			VaccinePat vaccinepat=new VaccinePat();
			vaccinepat.DeserializeFromXml(xml);
			return vaccinepat;
		}
		if(type=="Vitalsign") {
			Vitalsign vitalsign=new Vitalsign();
			vitalsign.DeserializeFromXml(xml);
			return vitalsign;
		}
		if(type=="ZipCode") {
			ZipCode zipcode=new ZipCode();
			zipcode.DeserializeFromXml(xml);
			return zipcode;
		}
		return null;
	}

	/** Pass in the entire xml response and this method will return a deserialized ArrayList.
	 * @throws Exception Throws exception if the list cannot be deserialized. */
	private static Object DeserializeList(String xml) throws Exception {
		// TODO Figure out how to deserialize list objects without reflection here.
		throw new Exception("DeserializeList, error deserializing list.");
	}

	/** Pass in the entire xml response and this method will return a deserialized ArrayList.
	 * @throws Exception Throws exception if the list cannot be deserialized. */
	private static Object DeserializeDataTable(String xml) throws Exception {
		// TODO Figure out how to deserialize data table objects here.
		throw new Exception("DeserializeDataTable, error deserializing data table.");
	}

	/** Pass in the xml string parsed into a Document and the desired tagname to attempt to get the value.
	 * Returns the node value or null if node is not included in the Document. */
	public static String GetXmlNodeValue(Document doc,String tagname) {
		NodeList list=doc.getElementsByTagName(tagname);
		if(list!=null && list.getLength()>0) {
			Node node=list.item(0).getFirstChild();
			if(node!=null) {
				return node.getNodeValue();
			}
		}
		return null;
	}

}
