package com.opendental.odweb.client.tabletypes;

import com.google.gwt.xml.client.Document;
import com.opendental.odweb.client.remoting.Serializing;
import com.google.gwt.i18n.client.DateTimeFormat;
import java.util.Date;

//DO NOT MAKE CHANGES TO THIS FILE.  THEY WILL GET OVERWRITTEN BY THE CRUD.
public class Equipment {
		/** Primary key. */
		public int EquipmentNum;
		/** Short description, need not be very unique. */
		public String Description;
		/** Must be unique among all pieces of equipment.  Auto-generated 3 char alpha numeric gives 1.5M unique serial numbers.  Zero never part of autogenerated serial number. */
		public String SerialNumber;
		/** Limit 2 char. */
		public String ModelYear;
		/** Date when this corporation obtained the equipment.  Always has a valid value. */
		public Date DatePurchased;
		/** Normally 01-01-0001 if equipment still in possession.  Once sold, a date will be present. */
		public Date DateSold;
		/** . */
		public double PurchaseCost;
		/** . */
		public double MarketValue;
		/** Freeform text. */
		public String Location;
		/** Security uses this date to lock older entries from accidental deletion.  Date, no time. */
		public Date DateEntry;

		/** Deep copy of object. */
		public Equipment deepCopy() {
			Equipment equipment=new Equipment();
			equipment.EquipmentNum=this.EquipmentNum;
			equipment.Description=this.Description;
			equipment.SerialNumber=this.SerialNumber;
			equipment.ModelYear=this.ModelYear;
			equipment.DatePurchased=this.DatePurchased;
			equipment.DateSold=this.DateSold;
			equipment.PurchaseCost=this.PurchaseCost;
			equipment.MarketValue=this.MarketValue;
			equipment.Location=this.Location;
			equipment.DateEntry=this.DateEntry;
			return equipment;
		}

		/** Serialize the object into XML. */
		public String serialize() {
			StringBuilder sb=new StringBuilder();
			sb.append("<Equipment>");
			sb.append("<EquipmentNum>").append(EquipmentNum).append("</EquipmentNum>");
			sb.append("<Description>").append(Serializing.escapeForXml(Description)).append("</Description>");
			sb.append("<SerialNumber>").append(Serializing.escapeForXml(SerialNumber)).append("</SerialNumber>");
			sb.append("<ModelYear>").append(Serializing.escapeForXml(ModelYear)).append("</ModelYear>");
			sb.append("<DatePurchased>").append(DateTimeFormat.getFormat("yyyyMMddHHmmss").format(DatePurchased)).append("</DatePurchased>");
			sb.append("<DateSold>").append(DateTimeFormat.getFormat("yyyyMMddHHmmss").format(DateSold)).append("</DateSold>");
			sb.append("<PurchaseCost>").append(PurchaseCost).append("</PurchaseCost>");
			sb.append("<MarketValue>").append(MarketValue).append("</MarketValue>");
			sb.append("<Location>").append(Serializing.escapeForXml(Location)).append("</Location>");
			sb.append("<DateEntry>").append(DateTimeFormat.getFormat("yyyyMMddHHmmss").format(DateEntry)).append("</DateEntry>");
			sb.append("</Equipment>");
			return sb.toString();
		}

		/** Sets all the variables on this object based on the values in the XML document.  Variables that are not in the XML document will be null or their default values.
		 * @param doc A parsed XML document.  Must be valid XML.  Does not need to contain a node for every variable on this object.
		 * @throws Exception DeserializeFromXml is entirely encased in a try catch and will throw exceptions if anything goes wrong. */
		public void deserialize(Document doc) throws Exception {
			try {
				if(Serializing.getXmlNodeValue(doc,"EquipmentNum")!=null) {
					EquipmentNum=Integer.valueOf(Serializing.getXmlNodeValue(doc,"EquipmentNum"));
				}
				if(Serializing.getXmlNodeValue(doc,"Description")!=null) {
					Description=Serializing.getXmlNodeValue(doc,"Description");
				}
				if(Serializing.getXmlNodeValue(doc,"SerialNumber")!=null) {
					SerialNumber=Serializing.getXmlNodeValue(doc,"SerialNumber");
				}
				if(Serializing.getXmlNodeValue(doc,"ModelYear")!=null) {
					ModelYear=Serializing.getXmlNodeValue(doc,"ModelYear");
				}
				if(Serializing.getXmlNodeValue(doc,"DatePurchased")!=null) {
					DatePurchased=DateTimeFormat.getFormat("yyyyMMddHHmmss").parseStrict(Serializing.getXmlNodeValue(doc,"DatePurchased"));
				}
				if(Serializing.getXmlNodeValue(doc,"DateSold")!=null) {
					DateSold=DateTimeFormat.getFormat("yyyyMMddHHmmss").parseStrict(Serializing.getXmlNodeValue(doc,"DateSold"));
				}
				if(Serializing.getXmlNodeValue(doc,"PurchaseCost")!=null) {
					PurchaseCost=Double.valueOf(Serializing.getXmlNodeValue(doc,"PurchaseCost"));
				}
				if(Serializing.getXmlNodeValue(doc,"MarketValue")!=null) {
					MarketValue=Double.valueOf(Serializing.getXmlNodeValue(doc,"MarketValue"));
				}
				if(Serializing.getXmlNodeValue(doc,"Location")!=null) {
					Location=Serializing.getXmlNodeValue(doc,"Location");
				}
				if(Serializing.getXmlNodeValue(doc,"DateEntry")!=null) {
					DateEntry=DateTimeFormat.getFormat("yyyyMMddHHmmss").parseStrict(Serializing.getXmlNodeValue(doc,"DateEntry"));
				}
			}
			catch(Exception e) {
				throw e;
			}
		}


}
