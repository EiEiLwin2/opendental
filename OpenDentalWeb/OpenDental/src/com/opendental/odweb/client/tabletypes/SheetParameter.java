package com.opendental.odweb.client.tabletypes;

import java.util.ArrayList;

import com.opendental.odweb.client.tabletypes.Sheet.SheetTypeEnum;

//This is the only TableType that is not generated by the CRUD.  Make any changes you need to here.  In C#, the file can be found in OpenDentBusiness/SheetFramework/SheetParameter.
public class SheetParameter {
	/**  */
	public boolean IsRequired;
	/** Usually, a columnName. */
	public String ParamName;
	/** This is the value which must be set in order to obtain data from the database. It is usually an int primary key.  If running a batch, this may be an array of int. */
	public Object ParamValue;

	/** Do not directly use this constructor. */
	public SheetParameter() {
		IsRequired=false;
		ParamName="";
	}
	
	/**  */
	public SheetParameter(boolean isRequired,String paramName) {
		IsRequired=isRequired;
		ParamName=paramName;
	}
	
	/**  */
	public SheetParameter(boolean isRequired,String paramName,String paramValue) {
		IsRequired=isRequired;
		ParamName=paramName;
		ParamValue=paramValue;
	}
	
	/** Every sheet has at least one required parameter, usually the primary key of an important table. */
	public static ArrayList<SheetParameter> GetForType(SheetTypeEnum sheetType) {
		ArrayList<SheetParameter> list=new ArrayList<SheetParameter>();
		if(sheetType==SheetTypeEnum.LabelPatient) {
			list.add(new SheetParameter(true,"PatNum"));
		}
		if(sheetType==SheetTypeEnum.LabelCarrier) {
			list.add(new SheetParameter(true,"CarrierNum"));
		}
		if(sheetType==SheetTypeEnum.LabelReferral) {
			list.add(new SheetParameter(true,"ReferralNum"));
		}
		if(sheetType==SheetTypeEnum.ReferralSlip) {
			list.add(new SheetParameter(true,"PatNum"));
			list.add(new SheetParameter(true,"ReferralNum"));
		}
		if(sheetType==SheetTypeEnum.LabelAppointment) {
			list.add(new SheetParameter(true,"AptNum"));
		}
		if(sheetType==SheetTypeEnum.Rx) {
			list.add(new SheetParameter(true,"RxNum"));
		}
		if(sheetType==SheetTypeEnum.Consent) {
			list.add(new SheetParameter(true,"PatNum"));
		}
		if(sheetType==SheetTypeEnum.PatientLetter) {
			list.add(new SheetParameter(true,"PatNum"));
		}
		if(sheetType==SheetTypeEnum.ReferralLetter) {
			list.add(new SheetParameter(true,"PatNum"));
			list.add(new SheetParameter(true,"ReferralNum"));
		}
		if(sheetType==SheetTypeEnum.PatientForm) {
			list.add(new SheetParameter(true,"PatNum"));
		}
		if(sheetType==SheetTypeEnum.RoutingSlip) {
			list.add(new SheetParameter(true,"AptNum"));
		}
		if(sheetType==SheetTypeEnum.MedicalHistory) {
			list.add(new SheetParameter(true,"PatNum"));
		}
		if(sheetType==SheetTypeEnum.LabSlip) {
			list.add(new SheetParameter(true,"PatNum"));
			list.add(new SheetParameter(true,"LabCaseNum"));
		}
		if(sheetType==SheetTypeEnum.ExamSheet) {
			list.add(new SheetParameter(true,"PatNum"));
		}
		if(sheetType==SheetTypeEnum.DepositSlip){
			list.add(new SheetParameter(true,"DepositNum"));
		}
		return list;
	}
	
	/** @throws Exception If parameter not found.  */
	public static void SetParameter(Sheet sheet,String paramName,Object paramValue) throws Exception {
		SheetParameter param=GetParamByName(sheet.Parameters,paramName);
		if(param==null){
			throw new Exception("Sheet, parameter not found: "+paramName);
		}
		param.ParamValue=paramValue;
	}
	
	/**  */
	public static SheetParameter GetParamByName(ArrayList<SheetParameter> parameters,String paramName) {
		for(int i=0;i<parameters.size();i++) {
			if(parameters.get(i).ParamName.equals(paramName)) {
				return parameters.get(i);
			}
		}
		return null;
	}
	
	
	
}
